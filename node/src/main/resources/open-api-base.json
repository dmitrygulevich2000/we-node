{
  "swagger": "2.0",
  "info": {
    "version": "WE 1.0.0",
    "title": "Waves Enterprise Node",
    "description": "API Explorer for Waves Enterprise Node",
    "contact": {
      "email": "support@wavesenterprise.com"
    }
  },
  "basePath": "/",
  "securityDefinitions": {
    "API-Key": {
      "type": "apiKey",
      "description": "",
      "name": "X-API-Key",
      "in": "header"
    },
    "Privacy-API-Key": {
      "type": "apiKey",
      "description": "",
      "name": "X-API-Key",
      "in": "header"
    },
    "OAuth": {
      "type": "apiKey",
      "description": "",
      "name": "Authorization",
      "in": "header"
    }
  },
  "schemes": [
    "https",
    "http"
  ],
  "consumes": [
    "application/json",
    "multipart/form-data"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/addresses/info/{address}": {
      "get": {
        "description": "Find account with given address in the keystore and retrieve it's public key",
        "summary": "Public key for address from keystore",
        "tags": [
          "addresses"
        ],
        "operationId": "addressPubkeyInfo",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Address",
            "x-example": "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww"
          }
        ],
        "responses": {
          "200": {
            "description": "Public key for given address",
            "schema": {
              "$ref": "#/definitions/AddressPublicKeyInfo"
            },
            "headers": {}
          },
          "400": {
            "description": "Address is either invalid or not found in node's keystore",
            "schema": {}
          }
        }
      }
    },
    "/addresses/seq/{from}/{to}": {
      "get": {
        "description": "Get wallet accounts addresses in the range",
        "summary": "Get wallet account",
        "tags": [
          "addresses"
        ],
        "operationId": "GetAddressesRange",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "from",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "Start address number",
            "x-example": 10
          },
          {
            "name": "to",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "End address number",
            "x-example": 20
          }
        ],
        "responses": {
          "200": {
            "description": "List of accounts addresses",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/addresses/publicKey/{publicKey}": {
      "get": {
        "description": "Get an address by public key",
        "summary": "Get address from public key",
        "tags": [
          "addresses"
        ],
        "operationId": "getAddressByPubKey",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "publicKey",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Public key in Base58 format",
            "x-example": "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww"
          }
        ],
        "responses": {
          "200": {
            "description": "Address",
            "schema": {
              "$ref": "#/definitions/AddressSimplified"
            },
            "headers": {}
          }
        }
      }
    },
    "/addresses/balance/{address}": {
      "get": {
        "description": "Account's balance",
        "summary": "Balance",
        "tags": [
          "addresses"
        ],
        "operationId": "getBalanceByAddress",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Address",
            "x-example": "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww"
          }
        ],
        "responses": {
          "200": {
            "description": "Balance",
            "schema": {
              "$ref": "#/definitions/Balance"
            },
            "headers": {}
          }
        }
      }
    },
    "/contracts/balance/{contractId}": {
      "get": {
        "description": "WEST balance of the contract",
        "summary": "System token balance",
        "tags": [
          "contracts"
        ],
        "operationId": "getContractWestBalance",
        "deprercated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Contract Id",
            "x-example": "9ekQuYn92natMnMq8KqeGK3Nn7cpKd3BvPEGgD6fFyyz"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns contract WEST balance info",
            "schema": {
              "$ref": "#/definitions/ContractAssetBalance"
            },
            "headers": {}
          }
        }
      }
    },
    "/contracts/asset-balance/{contractId}/{assetId}": {
      "get": {
        "description": "Asset balance of the contract",
        "summary": "Asset balance",
        "tags": [
          "contracts"
        ],
        "operationId": "getContractAssetBalance",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Contract Id",
            "x-example": "9ekQuYn92natMnMq8KqeGK3Nn7cpKd3BvPEGgD6fFyyz"
          },
          {
            "name": "assetId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Asset Id",
            "x-example": "9ekQuYn92natMnMq8KqeGK3Nn7cpKd3BvPEGgD6fFyyz"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns contract asset balance info",
            "schema": {
              "$ref": "#/definitions/ContractAssetBalance"
            },
            "headers": {}
          }
        }
      }
    },
    "/contracts/asset-balances": {
      "post": {
        "description": "Assets balances of the contract",
        "summary": "Assets balances",
        "tags": [
          "contracts"
        ],
        "operationId": "getContractAssetsBalances",
        "deprercated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": false,
            "default": "application/json",
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Json request params",
            "schema": {
              "$ref": "#/definitions/ContractAssetsBalancesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns contract assets balances info",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContractAssetBalance"
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/addresses/validate/{addressOrAlias}": {
      "get": {
        "description": "Check whether address or alias {addressOrAlias} is valid or not",
        "summary": "Validate address or alias",
        "tags": [
          "addresses"
        ],
        "operationId": "ValidateAddressOrAlias",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "addressOrAlias",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "addressOrAlias",
            "x-example": "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/ValiditySingle"
            },
            "headers": {}
          }
        }
      }
    },
    "/addresses/sign/{address}": {
      "post": {
        "description": "Sign a message with a private key associated with {address}",
        "summary": "Sign given message",
        "tags": [
          "addresses"
        ],
        "operationId": "SignMessageByAddress",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Address",
            "x-example": "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww"
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": false,
            "default": "application/json",
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Message to sign as a plain string",
            "schema": {
              "$ref": "#/definitions/SignMessageByAddressRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Json with error or json like {\"message\": \"message-in-Base58-format\",\"publickey\": \"publickey-in-Base58-format\", \"signature\": \"signature-in-Base58-format\"}",
            "schema": {
              "$ref": "#/definitions/Signed"
            },
            "headers": {}
          }
        }
      }
    },
    "/addresses/data/{address}": {
      "get": {
        "description": "Read all data posted by an account",
        "summary": "Account's data",
        "tags": [
          "addresses"
        ],
        "operationId": "GetDataByAddress",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Address",
            "x-example": "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Offset value",
            "x-example": 10
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Limit value",
            "x-example": 20
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DataEntry"
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/addresses/scriptInfo/{address}": {
      "get": {
        "description": "Read script posted on account",
        "summary": "Account's script",
        "tags": [
          "addresses"
        ],
        "operationId": "getScriptInfoByAddress",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Address",
            "x-example": "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww"
          }
        ],
        "responses": {
          "200": {
            "description": "Scripted account details",
            "schema": {
              "$ref": "#/definitions/AddressScriptInfo"
            },
            "headers": {}
          }
        }
      }
    },
    "/addresses/signText/{address}": {
      "post": {
        "description": "Sign a message with a private key associated with {address}",
        "summary": "Sign text",
        "tags": [
          "addresses"
        ],
        "operationId": "signTextByAddress",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Address",
            "x-example": "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww"
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": false,
            "default": "application/json",
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Message to sign as a plain string",
            "schema": {
              "$ref": "#/definitions/SignMessageByAddressRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Json with error or json like {\"message\": \"plain text\", \"publickey\": \"publickey-in-Base58-format\", \"signature\": \"signature-in-Base58-format\"}",
            "schema": {
              "$ref": "#/definitions/Signed"
            },
            "headers": {}
          }
        }
      }
    },
    "/addresses/verifyText/{address}": {
      "post": {
        "description": "Check a signature of a message signed by an account",
        "summary": "Verify signature",
        "tags": [
          "addresses"
        ],
        "operationId": "verifyTextByAddress",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Address",
            "x-example": "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww"
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": false,
            "default": "application/json",
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Json with data",
            "schema": {
              "$ref": "#/definitions/SignedMessage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/VerificationResult"
            },
            "headers": {}
          }
        }
      }
    },
    "/addresses/balance/details/{address}": {
      "get": {
        "description": "Detailed account balance",
        "summary": "Detailed account balance",
        "tags": [
          "addresses"
        ],
        "operationId": "GetBalanceDetailsByAddress",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Address",
            "x-example": "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/BalanceDetails"
            },
            "headers": {}
          }
        }
      }
    },
    "/addresses/balance/details": {
      "post": {
        "description": "Balance details for few addresses",
        "summary": "Several accounts detailed balance",
        "tags": [
          "addresses"
        ],
        "operationId": "GetBalanceDetailsForManyAddresses",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": false,
            "default": "application/json",
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Json with array of addresses",
            "schema": {
              "$ref": "#/definitions/AddressesMessage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Json with response or error",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BalanceDetails"
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/addresses/effectiveBalance/{address}/{confirmations}": {
      "get": {
        "description": "Balance of {address} after {confirmations}",
        "summary": "Balance with confirmations",
        "tags": [
          "addresses"
        ],
        "operationId": "getEffectiveBalanceByAddressAndConfirmations",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Address",
            "x-example": "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww"
          },
          {
            "name": "confirmations",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "",
            "x-example": 4
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Balance"
            },
            "headers": {}
          }
        }
      }
    },
    "/addresses/validateMany": {
      "post": {
        "description": "Check whether addresses or aliases {addressOrAlias} are valid or not",
        "summary": "Validate several addresses or aliases",
        "tags": [
          "addresses"
        ],
        "operationId": "validateManyAddressesOrAliases",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": false,
            "default": "application/json",
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Json with data",
            "schema": {
              "$ref": "#/definitions/ValidateManyReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Json with response or error",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ValiditySingle"
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/addresses/data/{address}/{key}": {
      "get": {
        "description": "Read data associated with an account and a key",
        "summary": "Read account's data on key",
        "tags": [
          "addresses"
        ],
        "operationId": "getDataByAddressAndKey",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Address",
            "x-example": "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww"
          },
          {
            "name": "key",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Data key",
            "x-example": "some-key"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/DataEntry"
            },
            "headers": {}
          }
        }
      }
    },
    "/addresses/effectiveBalance/{address}": {
      "get": {
        "description": "Account's effective balance",
        "summary": "Effective balance",
        "tags": [
          "addresses"
        ],
        "operationId": "getEffectiveBalanceByAddress",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Address",
            "x-example": "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Balance"
            },
            "headers": {}
          }
        }
      }
    },
    "/addresses/generatingBalance/{address}/at/{height}": {
      "get": {
        "description": "Account's generating balance at height",
        "summary": "Generating balance",
        "tags": [
          "addresses"
        ],
        "operationId": "getGeneratingBalanceByAddressAtHeight",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Address",
            "x-example": "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww"
          },
          {
            "name": "height",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "Height",
            "x-example": "1000"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/GeneratingBalance"
            },
            "headers": {}
          },
          "400": {
            "description": "Requested height is greater than current state height or the address is invalid",
            "schema": {}
          }
        }
      }
    },
    "/addresses": {
      "get": {
        "description": "Get present keystore accounts addresses",
        "summary": "Keystore addresses",
        "tags": [
          "addresses"
        ],
        "operationId": "getAddresses",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/addresses/verify/{address}": {
      "post": {
        "description": "Check a signature of a message signed by an account",
        "summary": "Verify signature",
        "tags": [
          "addresses"
        ],
        "operationId": "verifyMessageByAddress",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Address",
            "x-example": "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww"
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": false,
            "default": "application/json",
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Json with data",
            "schema": {
              "$ref": "#/definitions/SignedMessage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/VerificationResult"
            },
            "headers": {}
          }
        }
      }
    },
    "/blocks/height": {
      "get": {
        "description": "Get current blockchain height",
        "summary": "Blockchain height",
        "tags": [
          "blocks"
        ],
        "operationId": "BlockchainHeight",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Block",
            "schema": {
              "$ref": "#/definitions/BlocksHeightResponse"
            },
            "headers": {}
          }
        }
      }
    },
    "/blocks/seq/{from}/{to}": {
      "get": {
        "description": "Get blocks in specified range",
        "summary": "Blocks sequence",
        "tags": [
          "blocks"
        ],
        "operationId": "BlockRange",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "from",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "Start block height",
            "x-example": 10
          },
          {
            "name": "to",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "End block height",
            "x-example": 20
          }
        ],
        "responses": {
          "200": {
            "description": "Blocks sequence",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Block"
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/blocks/last": {
      "get": {
        "description": "Get last block",
        "summary": "Last block",
        "tags": [
          "blocks"
        ],
        "operationId": "BlocksLast",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Get last block",
            "schema": {
              "$ref": "#/definitions/Block"
            },
            "headers": {}
          }
        }
      }
    },
    "/blocks/child/{signature}": {
      "get": {
        "description": "Returns an inherited block from a signature block",
        "summary": "Child block",
        "tags": [
          "blocks"
        ],
        "operationId": "InheritedBlockBySignature",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "signature",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Signature in Base58 format",
            "x-example": "asdjg"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Block"
            },
            "headers": {}
          }
        }
      }
    },
    "/blocks/at/{height}": {
      "get": {
        "description": "Get block at specified height",
        "summary": "Block at height",
        "tags": [
          "blocks"
        ],
        "operationId": "BlockAtHeight",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "height",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "Block height",
            "x-example": 55
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Block"
            },
            "headers": {}
          }
        }
      }
    },
    "/blocks/height/{signature}": {
      "get": {
        "description": "Block height by signature",
        "summary": "Height of a block by its (signature)",
        "tags": [
          "blocks"
        ],
        "operationId": "BlockHeightBySignature",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "signature",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Signature in Base58 format",
            "x-example": "saasdsgfdg"
          }
        ],
        "responses": {
          "200": {
            "description": "Block height",
            "schema": {
              "$ref": "#/definitions/BlocksHeightResponse"
            },
            "headers": {}
          }
        }
      }
    },
    "/blocks/headers/at/{height}": {
      "get": {
        "description": "Get block header at specified height",
        "summary": "Block headers at height",
        "tags": [
          "blocks"
        ],
        "operationId": "BlockHeaderAtHeight",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "height",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "Block height",
            "x-example": 55
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/BlockHeader"
            },
            "headers": {}
          }
        }
      }
    },
    "/blocks/seqext/{from}/{to}": {
      "get": {
        "description": "Get blocks at specified heights (with extended transaction info)",
        "summary": "Blocks sequence (extended)",
        "tags": [
          "blocks"
        ],
        "operationId": "BlockRangeExt",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "from",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "Start block height",
            "x-example": 10
          },
          {
            "name": "to",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "End block height",
            "x-example": 20
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Block"
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/blocks/headers/seq/{from}/{to}": {
      "get": {
        "description": "Get block headers at specified heights",
        "summary": "Blocks headers sequence",
        "tags": [
          "blocks"
        ],
        "operationId": "BlockHeadersRange",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "from",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "Start block height",
            "x-example": 10
          },
          {
            "name": "to",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "End block height",
            "x-example": 20
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BlockHeader"
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/blocks/headers/last": {
      "get": {
        "description": "Get last block header",
        "summary": "Last block's headers",
        "tags": [
          "blocks"
        ],
        "operationId": "BlockHeaderLast",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/BlockHeader"
            },
            "headers": {}
          }
        }
      }
    },
    "/blocks/signature/{signature}": {
      "get": {
        "description": "Get block by its signature",
        "summary": "Block by id (signature)",
        "tags": [
          "blocks"
        ],
        "operationId": "GetBlockBySignature",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "signature",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Signature in Base58 format",
            "x-example": "asdsdgfs"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Block"
            },
            "headers": {}
          }
        }
      }
    },
    "/blocks/first": {
      "get": {
        "description": "Get genesis block",
        "summary": "Genesis block",
        "tags": [
          "blocks"
        ],
        "operationId": "GetGenesisBlock",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Block"
            },
            "headers": {}
          }
        }
      }
    },
    "/blocks/address/{address}/{from}/{to}": {
      "get": {
        "description": "Get list of blocks generated by specified address",
        "summary": "Blocks by address",
        "tags": [
          "blocks"
        ],
        "operationId": "GetBlocksProdusedByAddress",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "from",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "Start block height",
            "x-example": 10
          },
          {
            "name": "to",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "End block height",
            "x-example": 20
          },
          {
            "name": "address",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Address",
            "x-example": "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Block"
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/crypto/decrypt": {
      "post": {
        "description": "Decrypt text by private key",
        "summary": "Decrypt",
        "tags": [
          "crypto"
        ],
        "operationId": "DecryptText",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": false,
            "default": "application/json",
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Json with recipient public key and text to decrypt",
            "schema": {
              "$ref": "#/definitions/DecryptDataRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/DecryptDataResponse"
            },
            "headers": {}
          }
        }
      }
    },
    "/crypto/encryptSeparate": {
      "post": {
        "description": "Encrypt text for recipients separately",
        "summary": "Encrypt (separate encrypted data)",
        "tags": [
          "crypto"
        ],
        "operationId": "encryptTextSeparately",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": false,
            "default": "application/json",
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Json with recipients public keys and text to encrypt",
            "schema": {
              "$ref": "#/definitions/EncryptDataRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EncryptedSingleResponse"
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/crypto/encryptCommon": {
      "post": {
        "description": "Encrypt text for recipients on a common key",
        "summary": "Encrypt (common encrypted data)",
        "tags": [
          "crypto"
        ],
        "operationId": "EncryptTextCommon",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": false,
            "default": "application/json",
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Json with recipients public keys and text to encrypt",
            "schema": {
              "$ref": "#/definitions/EncryptDataRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/EncryptedForManyResponse"
            },
            "headers": {}
          }
        }
      }
    },
    "/peers/hostname/{address}": {
      "get": {
        "description": "Get node hostname and IP address",
        "summary": "Peer hostname",
        "tags": [
          "peers"
        ],
        "operationId": "GetHostname",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Address",
            "x-example": "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/PeersHostnameResponse"
            },
            "headers": {}
          }
        }
      }
    },
    "/peers/all": {
      "get": {
        "description": "Peer list",
        "summary": "Peer list",
        "tags": [
          "peers"
        ],
        "operationId": "allPeers",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PeersAllResponse"
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/peers/connected": {
      "get": {
        "description": "Connected peers list",
        "summary": "Connected peers",
        "tags": [
          "peers"
        ],
        "operationId": "connectedPeers",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Json with connected peers or error",
            "schema": {
              "$ref": "#/definitions/PeersConnectedResponse"
            },
            "headers": {}
          }
        }
      }
    },
    "/peers/allowedNodes": {
      "get": {
        "description": "List of registered participants (node addresses)",
        "summary": "Registered node-owners",
        "tags": [
          "peers"
        ],
        "operationId": "getAllowedNodes",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "JSON with list of address + publicKey of allowed nodes",
            "schema": {
              "$ref": "#/definitions/PeersAllowedNodesResponse"
            },
            "headers": {}
          }
        }
      }
    },
    "/peers/suspended": {
      "get": {
        "description": "Suspended peers list",
        "summary": "Suspended peers",
        "tags": [
          "peers"
        ],
        "operationId": "suspendedPeers",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "JSON with suspended peers or error",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PeersSuspendedResponse"
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/peers/connect": {
      "post": {
        "description": "Connect to peer",
        "summary": "Connect to peer",
        "tags": [
          "peers"
        ],
        "operationId": "connect",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": false,
            "default": "application/json",
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Json with data",
            "schema": {
              "$ref": "#/definitions/ConnectReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/PeersConnectResponse"
            },
            "headers": {}
          }
        }
      }
    },
    "/privacy/forceSync": {
      "post": {
        "description": "Force node to download all policy data that it should store",
        "summary": "Force sync privacy data",
        "tags": [
          "privacy"
        ],
        "operationId": "forceSync",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/PrivacyForceSyncResponse"
            },
            "headers": {}
          }
        }
      }
    },
    "/privacy/forceSync/{policyId}": {
      "get": {
        "description": "Force node to download policy data by policy id that it should store",
        "summary": "Force sync privacy data",
        "tags": [
          "privacy"
        ],
        "operationId": "forceSyncByPolicyId",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "policyId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "PolicyId",
            "x-example": "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/PrivacyForceSyncResponse"
            },
            "headers": {}
          }
        }
      }
    },
    "/privacy/{policyId}/getData/{policyItemHash}": {
      "get": {
        "description": "Get policy item data",
        "summary": "Get data",
        "tags": [
          "privacy"
        ],
        "operationId": "getPolicyDataByItemHash",
        "deprecated": false,
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "policyId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "PolicyId",
            "x-example": "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww"
          },
          {
            "name": "policyItemHash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "PolicyItemHash",
            "x-example": "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "string"
            },
            "headers": {}
          }
        }
      }
    },
    "/privacy/{policyId}/getLargeData/{policyItemHash}": {
      "get": {
        "description": "Get policy item large data",
        "summary": "Get large data",
        "tags": [
          "privacy"
        ],
        "operationId": "getPolicyLargeDataByItemHash",
        "deprecated": false,
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "policyId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "PolicyId",
            "x-example": "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww"
          },
          {
            "name": "policyItemHash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "PolicyItemHash",
            "x-example": "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "string",
              "format": "binary"
            },
            "headers": {}
          }
        }
      }
    },
    "/privacy/{policyId}/recipients": {
      "get": {
        "description": "Get list of policy recipients by policy id",
        "summary": "Get recipients",
        "tags": [
          "privacy"
        ],
        "operationId": "getPolicyRecipients",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "policyId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "PolicyId",
            "x-example": "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "uniqueItems": true
            },
            "headers": {}
          }
        }
      }
    },
    "/privacy/{policyId}/hashes": {
      "get": {
        "description": "Get all policy data hashes",
        "summary": "Get hashes",
        "tags": [
          "privacy"
        ],
        "operationId": "getPolicyHashes",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "policyId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "PolicyId",
            "x-example": "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "uniqueItems": true
            },
            "headers": {}
          }
        }
      }
    },
    "/privacy/{policyId}/transactions": {
      "get": {
        "description": "Get all PolicyDataHash transactions ids by policyId",
        "summary": "Get PolicyDataHash transactions ids",
        "tags": [
          "privacy"
        ],
        "operationId": "getPolicyDataHashTransactionsIds",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "policyId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "PolicyId",
            "x-example": "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/privacy/{policyId}/getInfo/{policyItemHash}": {
      "get": {
        "description": "Get policy item info",
        "summary": "Get info",
        "tags": [
          "privacy"
        ],
        "operationId": "getPolicyInfoByItemHash",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "policyId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "PolicyId",
            "x-example": "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww"
          },
          {
            "name": "policyItemHash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "PolicyItemHash",
            "x-example": "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/PolicyMetaData"
            },
            "headers": {}
          }
        }
      }
    },
    "/privacy/getInfos": {
      "post": {
        "description": "Get policy items info",
        "summary": "Get infos",
        "tags": [
          "privacy"
        ],
        "operationId": "getPolicyInfoArrayByItemHashArray",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": false,
            "default": "application/json",
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Json with array of policy ids and item hashes",
            "schema": {
              "$ref": "#/definitions/PoliciesMetaInfoRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/PoliciesMetaInfoResponse"
            },
            "headers": {}
          }
        }
      }
    },
    "/privacy/sendDataV2": {
      "post": {
        "description": "Upload policy private data",
        "summary": "Send private data",
        "tags": [
          "privacy"
        ],
        "operationId": "sendDataV2",
        "deprecated": false,
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "data",
            "required": true,
            "type": "file",
            "description": ""
          },
          {
            "in": "formData",
            "name": "request",
            "required": true,
            "description": "Json with policy private data",
            "type": "string",
            "default": "\n{\n  \"version\": 3,\n  \"sender\": \"3HYW75PpAeVukmbYo9PQ3mzSHdKUgEytUUz\",\n  \"policyId\": \"4gZnJvbSBvdGhlciBhbmltYWxzLCB3aGljaC\",\n  \"type\": \"file\",\n  \"hash\": \"BCKm7TcZz6nuQMrEZYk8hJqY5WH2wAvSGXUR5WkVsh9f\",\n  \"info\": {\n    \"filename\": \"Договор об оказании услуг №100/5.doc\",\n    \"size\": 2048,\n    \"timestamp\": 1000000000,\n    \"author\": \"AIvanov@org.com\",\n    \"comment\": \"la la fam\"\n  },\n  \"fee\": 15000000,\n  \"feeAssetId\": null,\n  \"atomicBadge\": { trustedSender: \"3HYW75PpAeVukmbYo9PQ3mzSHdKUgEytUUz\"},\n  \"password\": \"12345qwert\",\n  \"timestamp\": 0\n}"
          },
          {
            "name": "broadcast",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": "true",
            "description": "Enables automatic broadcast of PolicyDataHashTransaction"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/PolicyDataHashTransaction"
            },
            "headers": {}
          }
        }
      }
    },
    "/privacy/sendData": {
      "post": {
        "description": "Upload policy private data",
        "summary": "Send private data",
        "tags": [
          "privacy"
        ],
        "operationId": "sendData",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": false,
            "default": "application/json",
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Json with policy private data",
            "schema": {
              "$ref": "#/definitions/SendDataRequest"
            }
          },
          {
            "name": "broadcast",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": "true",
            "description": "Enables automatic broadcast of PolicyDataHashTransaction"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/PolicyDataHashTransaction"
            },
            "headers": {}
          }
        }
      }
    },
    "/privacy/sendLargeData": {
      "post": {
        "description": "Upload policy private large data",
        "summary": "Send private large data",
        "tags": [
          "privacy"
        ],
        "operationId": "sendLargeData",
        "deprecated": false,
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "request",
            "required": true,
            "description": "Json with policy private data",
            "type": "string",
            "default": "\n{\n  \"version\": 3,\n  \"sender\": \"3HYW75PpAeVukmbYo9PQ3mzSHdKUgEytUUz\",\n  \"policyId\": \"4gZnJvbSBvdGhlciBhbmltYWxzLCB3aGljaC\",\n  \"type\": \"file\",\n  \"hash\": \"BCKm7TcZz6nuQMrEZYk8hJqY5WH2wAvSGXUR5WkVsh9f\",\n  \"info\": {\n    \"filename\": \"Договор об оказании услуг №100/5.doc\",\n    \"size\": 2048,\n    \"timestamp\": 1000000000,\n    \"author\": \"AIvanov@org.com\",\n    \"comment\": \"la la fam\"\n  },\n  \"fee\": 15000000,\n  \"feeAssetId\": null,\n  \"atomicBadge\": { trustedSender: \"3HYW75PpAeVukmbYo9PQ3mzSHdKUgEytUUz\"},\n  \"password\": \"12345qwert\",\n  \"timestamp\": 0\n}"
          },
          {
            "in": "formData",
            "name": "data",
            "required": true,
            "type": "file",
            "description": ""
          },
          {
            "name": "broadcast",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": "true",
            "description": "Enables automatic broadcast of PolicyDataHashTransaction"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/PolicyDataHashTransaction"
            },
            "headers": {}
          }
        }
      }
    },
    "/privacy/{policyId}/owners": {
      "get": {
        "description": "Get list of policy owners by policy id",
        "summary": "Get policy owners",
        "tags": [
          "privacy"
        ],
        "operationId": "getPolicyOwners",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "policyId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "PolicyId",
            "x-example": "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list of policy owners",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "uniqueItems": true
            },
            "examples": {
              "application/json": [
                "3GCFaCWtvLDnC9yX29YftMbn75gwfdwGsBn"
              ]
            },
            "headers": {}
          }
        }
      }
    },
    "/transactions/info/{id}": {
      "get": {
        "description": "Get a transaction by its ID",
        "summary": "Transaction by id",
        "tags": [
          "transactions"
        ],
        "operationId": "getTransactionInfoById",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Transaction ID",
            "x-example": "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww"
          }
        ],
        "responses": {
          "200": {
            "description": "Requested tx of error",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        }
      }
    },
    "/transactions/sign": {
      "post": {
        "description": "Sign a transaction with the sender's private key",
        "summary": "Sign transaction",
        "tags": [
          "transactions"
        ],
        "operationId": "signTx",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": false,
            "default": "application/json",
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Transaction data including type",
            "schema": {
              "$ref": "#/definitions/TransactionsSignRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tx with signature",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        }
      }
    },
    "/transactions/unconfirmed": {
      "get": {
        "description": "Get list of unconfirmed transactions",
        "summary": "Transactions in UTX",
        "tags": [
          "transactions"
        ],
        "operationId": "getUtxPoll",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of unconfirmed transactions",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        }
      }
    },
    "/transactions/unconfirmed/size": {
      "get": {
        "description": "Get the number of unconfirmed transactions in the UTX pool and their size in bytes",
        "summary": "UTX size",
        "tags": [
          "transactions"
        ],
        "operationId": "getUtxPoolSize",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Number of unconfirmed transactions",
            "schema": {
              "$ref": "#/definitions/TransactionsUnconfirmedSizeResponse"
            },
            "headers": {}
          }
        }
      }
    },
    "/transactions/unconfirmed/info/{id}": {
      "get": {
        "description": "Get an unconfirmed transaction by its ID",
        "summary": "Unconfirmed transaction info",
        "tags": [
          "transactions"
        ],
        "operationId": "getUnconfirmedTxInfoById",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Transaction ID",
            "x-example": "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww"
          }
        ],
        "responses": {
          "200": {
            "description": "Unconfirmed tx",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        }
      }
    },
    "/transactions/calculateFee": {
      "post": {
        "description": "Calculates minimal fee for a transaction",
        "summary": "Calculate fee",
        "tags": [
          "transactions"
        ],
        "operationId": "calculateTxFee",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": false,
            "default": "application/json",
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Transaction data including type",
            "schema": {
              "$ref": "#/definitions/TransactionsCalculateFeeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Calculated fee",
            "schema": {
              "$ref": "#/definitions/TransactionsCalculateFeeResponse"
            },
            "headers": {}
          }
        }
      }
    },
    "/transactions/signAndBroadcast": {
      "post": {
        "description": "Sign a transaction with the sender's private key and broadcast it to the network",
        "summary": "Sign & broadcast a transaction",
        "tags": [
          "transactions"
        ],
        "operationId": "signAndBroadcastTx",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": false,
            "default": "application/json",
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Transaction data including type",
            "schema": {
              "$ref": "#/definitions/TransactionsSignAndBroadcastRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {}
          }
        }
      }
    },
    "/transactions/address/{address}/limit/{limit}": {
      "get": {
        "description": "Get list of transactions where specified address has been involved",
        "summary": "Transactions for address",
        "tags": [
          "transactions"
        ],
        "operationId": "getTransactionsByAddress",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Address",
            "x-example": "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww"
          },
          {
            "name": "limit",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "Number of transactions to return",
            "x-example": 10
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Id of transaction to paginate after",
            "x-example": "sadasdasda"
          }
        ],
        "responses": {
          "200": {
            "description": "List of transactions",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        }
      }
    },
    "/transactions/broadcast": {
      "post": {
        "description": "Broadcast a signed transaction",
        "summary": "Broadcast transaction",
        "tags": [
          "transactions"
        ],
        "operationId": "broadcastTx",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": false,
            "default": "application/json",
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Transaction data including type and signature/proofs",
            "schema": {
              "$ref": "#/definitions/TransactionsBroadcastRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Broadcasted tx",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        }
      }
    },
    "/utils/time": {
      "get": {
        "description": "Current Node time (UTC)",
        "summary": "Current time",
        "tags": [
          "utils"
        ],
        "operationId": "time",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Json with time or error",
            "schema": {
              "$ref": "#/definitions/UtilsTime"
            },
            "headers": {}
          }
        }
      }
    },
    "/utils/hash/secure": {
      "post": {
        "description": "Return SecureCryptographicHash of specified message",
        "summary": "Secure hash",
        "tags": [
          "utils"
        ],
        "operationId": "hashSecure",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": false,
            "default": "application/json",
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Message to hash",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Json with error or json like {\"message\": \"your message\",\"hash\": \"your message hash\"}",
            "schema": {
              "$ref": "#/definitions/HashSecureMessage"
            },
            "headers": {}
          }
        }
      }
    },
    "/utils/hash/fast": {
      "post": {
        "description": "Return FastCryptographicHash of specified message",
        "summary": "Fast hash",
        "tags": [
          "utils"
        ],
        "operationId": "hashFast",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": false,
            "default": "application/json",
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Message to hash",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Json with error or json like {\"message\": \"your message\",\"hash\": \"your message hash\"}",
            "schema": {
              "$ref": "#/definitions/HashFastSecureMessage"
            },
            "headers": {}
          }
        }
      }
    },
    "/utils/reload-wallet": {
      "post": {
        "description": "Reloads wallet after its update",
        "summary": "Reload wallet",
        "tags": [
          "utils"
        ],
        "operationId": "reloadWallet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Wallet reloaded successfully",
            "schema": {
              "$ref": "#/definitions/ReloadWallet"
            },
            "headers": {}
          }
        }
      }
    },
    "/utils/script/estimate": {
      "post": {
        "description": "Estimates compiled code in Base64 representation",
        "summary": "Estimate script complexity",
        "tags": [
          "utils"
        ],
        "operationId": "estimateScriptComplexity",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": false,
            "default": "application/json",
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "A compiled Base64 code",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "base64 or error",
            "schema": {
              "$ref": "#/definitions/EstimateScriptComplexity"
            },
            "headers": {}
          }
        }
      }
    },
    "/utils/script/compile": {
      "post": {
        "description": "Compiles string code to base64 script representation",
        "summary": "Compile script",
        "tags": [
          "utils"
        ],
        "operationId": "compileScript",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": false,
            "default": "application/json",
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Script code",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "compiled base64 script code or error",
            "schema": {
              "$ref": "#/definitions/CompilationResult"
            },
            "headers": {}
          }
        }
      }
    },
    "/permissions/{address}": {
      "get": {
        "description": "Get all active permissions for address for current time",
        "summary": "Permissions on address",
        "tags": [
          "permissions"
        ],
        "operationId": "getPermissionsByAddress",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Address",
            "x-example": "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RolesResponse"
            },
            "headers": {}
          }
        }
      }
    },
    "/permissions/{address}/at/{timestamp}": {
      "get": {
        "description": "Get all active permissions for address at timestamp",
        "summary": "Permissions on address (at timestamp)",
        "tags": [
          "permissions"
        ],
        "operationId": "getPermissionsByAddressAndTimestamp",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Address",
            "x-example": "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww"
          },
          {
            "name": "timestamp",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "Timestamp value",
            "x-example": 234234
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RolesResponse"
            },
            "headers": {}
          }
        }
      }
    },
    "/permissions/addresses": {
      "post": {
        "description": "Get active roles of given addresses at given timestamp",
        "summary": "Current active roles",
        "tags": [
          "permissions"
        ],
        "operationId": "getPermissionsByAddresses",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": false,
            "default": "application/json",
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Json with data",
            "schema": {
              "$ref": "#/definitions/PermissionsForAddressesReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RolesForSeqResponse"
            },
            "headers": {}
          }
        }
      }
    },
    "/alias/by-address/{address}": {
      "get": {
        "description": "Returns a collection of aliases associated with an address",
        "summary": "Address aliases",
        "tags": [
          "alias"
        ],
        "operationId": "getAliasesByAddress",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Address",
            "x-example": "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/alias/by-alias/{alias}": {
      "get": {
        "description": "Returns an address associated with an Alias. Alias should be plain text without an 'alias' prefix and network code.",
        "summary": "Address of alias",
        "tags": [
          "alias"
        ],
        "operationId": "getAddressByAlias",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Alias",
            "x-example": "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AliasByAliasResponse"
            },
            "headers": {}
          }
        }
      }
    },
    "/anchoring/config": {
      "get": {
        "description": "Anchoring config",
        "summary": "Anchoring config",
        "tags": [
          "anchoring"
        ],
        "operationId": "GetAnchoringConfig",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Get Anchoring config",
            "schema": {
              "$ref": "#/definitions/Anchoring"
            },
            "headers": {}
          }
        }
      }
    },
    "/assets/balance/{address}/{assetId}": {
      "get": {
        "description": "Account's balance by given asset",
        "summary": "Asset balance of address",
        "tags": [
          "assets"
        ],
        "operationId": "assetBalanceByAddress",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Address",
            "x-example": "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww"
          },
          {
            "name": "assetId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Asset ID",
            "x-example": "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww"
          }
        ],
        "responses": {
          "200": {
            "description": "Specific asset balance on address",
            "schema": {
              "$ref": "#/definitions/AssetsBalanceWithAddress"
            },
            "headers": {}
          }
        }
      }
    },
    "/assets/{assetId}/distribution/{height}/limit/{limit}": {
      "get": {
        "description": "Asset balance distribution by account at specified height",
        "summary": "Asset distribution at height",
        "tags": [
          "assets"
        ],
        "operationId": "assetBalanceDistributionAtHeight",
        "deprecated": true,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "assetId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Asset ID",
            "x-example": "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww"
          },
          {
            "name": "height",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "Height",
            "x-example": 44
          },
          {
            "name": "limit",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "Number of addresses to be returned",
            "x-example": 10
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "address to paginate after",
            "x-example": "sadsadsad"
          }
        ],
        "responses": {
          "200": {
            "description": "Specified asset distribution at specified height",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "number",
                "format": "double"
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/assets/balance": {
      "post": {
        "description": "Assets balances for few addresses",
        "summary": "Several asset balances",
        "tags": [
          "assets"
        ],
        "operationId": "GetAddressesBalance",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": false,
            "default": "application/json",
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Json with array of addresses",
            "schema": {
              "$ref": "#/definitions/AddressesMessage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Json with response or error",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/assets/details/{assetId}": {
      "get": {
        "description": "Provides detailed information about given asset",
        "summary": "Asset details",
        "tags": [
          "assets"
        ],
        "operationId": "assetDetails",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "assetId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the asset",
            "x-example": "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww"
          },
          {
            "name": "full",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "false",
            "x-example": true
          }
        ],
        "responses": {
          "200": {
            "description": "Details of specified asset",
            "schema": {
              "$ref": "#/definitions/AssetDetails"
            },
            "headers": {}
          }
        }
      }
    },
    "/assets/balance/{address}": {
      "get": {
        "description": "Account's balances for all assets",
        "summary": "Address assets balance",
        "tags": [
          "assets"
        ],
        "operationId": "assetsBalanceByAddress",
        "deprecated": true,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Address",
            "x-example": "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww"
          }
        ],
        "responses": {
          "200": {
            "description": "Account's balances for all assets",
            "schema": {
              "$ref": "#/definitions/AssetAccountDetails"
            },
            "headers": {}
          }
        }
      }
    },
    "/assets/balance-v2/{address}": {
      "get": {
        "description": "Updated flatten /assets/balance/{address} with support for contract-issued assets",
        "summary": "Address assets balance V2",
        "tags": [
          "assets"
        ],
        "operationId": "assetsBalanceByAddressV2",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Address",
            "x-example": "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww"
          }
        ],
        "responses": {
          "200": {
            "description": "Account's balances for all assets",
            "schema": {
              "$ref": "#/definitions/AssetAccountDetailsV2"
            },
            "headers": {}
          }
        }
      }
    },
    "/consensus/generationsignature": {
      "get": {
        "description": "Generation signature of a last block",
        "summary": "Last block's generation signature (PoS)",
        "tags": [
          "consensus"
        ],
        "operationId": "getLastBlockGenSig",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/GenerationSignatureResult"
            },
            "headers": {}
          }
        }
      }
    },
    "/consensus/basetarget/{signature}": {
      "get": {
        "description": "Base target of a block with specified signature",
        "summary": "Block's base target (PoS)",
        "tags": [
          "consensus"
        ],
        "operationId": "getBaseTargetByBlockSig",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "signature",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Signature in Base58 format",
            "x-example": "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/BaseTargetResult"
            },
            "headers": {}
          }
        }
      }
    },
    "/consensus/generatingbalance/{address}": {
      "get": {
        "description": "Account's generating balance(the same as balance atm)",
        "summary": "Generating balance (PoS)",
        "tags": [
          "consensus"
        ],
        "operationId": "getGenBalanceByAddress",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Address",
            "x-example": "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/ConsensusGeneratingbalanceResponse"
            },
            "headers": {}
          }
        }
      }
    },
    "/consensus/generationsignature/{signature}": {
      "get": {
        "description": "Generation signature of a block with specified id",
        "summary": "Block generation signature (PoS)",
        "tags": [
          "consensus"
        ],
        "operationId": "getGenSigByBlockSig",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "signature",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Signature in Base58 format",
            "x-example": "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GenerationSignatureResult"
            },
            "headers": {}
          }
        }
      }
    },
    "/consensus/basetarget": {
      "get": {
        "description": "Base target of a last block",
        "summary": "Last block's base target (PoS)",
        "tags": [
          "consensus"
        ],
        "operationId": "getBaseTargetOfLastBlock",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BaseTargetResult"
            },
            "headers": {}
          }
        }
      }
    },
    "/consensus/algo": {
      "get": {
        "description": "Shows which consensus algo being using",
        "summary": "Consensus algorithm",
        "tags": [
          "consensus"
        ],
        "operationId": "consensusAlgo",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/ConsensusAlgoResponse"
            },
            "headers": {}
          }
        }
      }
    },
    "/consensus/settings": {
      "get": {
        "description": "Shows active consensus settings from node config",
        "summary": "Consensus settings",
        "tags": [
          "consensus"
        ],
        "operationId": "consensusSettings",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/ConsensusSettingsResponse"
            },
            "headers": {}
          }
        }
      }
    },
    "/consensus/minersAtHeight/{height}": {
      "get": {
        "description": "gives MinerQueue for timestamp of a block at given height",
        "summary": "Miners at height (PoA)",
        "tags": [
          "consensus"
        ],
        "operationId": "getMinersAtHeight",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "height",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "Block height",
            "x-example": 33
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/MinersAtHeight"
            },
            "headers": {}
          }
        }
      }
    },
    "/consensus/miners/{timestamp}": {
      "get": {
        "description": "gives MinerQueue for given timestamp",
        "summary": "Miners at timestamp (PoA)",
        "tags": [
          "consensus"
        ],
        "operationId": "getMinerQueueAtTimestamp",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "timestamp",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "Timestamp value",
            "x-example": 2342355
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/MinersAtTimestamp"
            },
            "headers": {}
          }
        }
      }
    },
    "/consensus/bannedMiners/{height}": {
      "get": {
        "description": "list of miner addresses, that are banned at specified height",
        "summary": "Banned miners at height (PoA)",
        "tags": [
          "consensus"
        ],
        "operationId": "getBannedMinersAtHeight",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "height",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "Block height",
            "x-example": 55
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BannedMiners"
            },
            "headers": {}
          }
        }
      }
    },
    "/contracts": {
      "get": {
        "description": "Get contracts information",
        "summary": "Contracts info",
        "tags": [
          "contracts"
        ],
        "operationId": "getContractsInfo",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns contract info",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContractInfo"
              }
            },
            "headers": {}
          }
        }
      },
      "post": {
        "description": "Returns state for few contracts",
        "summary": "Contracts state",
        "tags": [
          "contracts"
        ],
        "operationId": "getStateForFewContracts",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": false,
            "default": "application/json",
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Json with array of contracts id",
            "schema": {
              "$ref": "#/definitions/ContractsIdMessage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Json with response or error",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            },
            "examples": {
              "application/json": {
                "DP5MggKC8GJuLZshCVNSYwBtE6WTRtMM1YPPdcmwbuNg": [
                  {
                    "key": "key",
                    "value": 123,
                    "type": "integer"
                  }
                ]
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/contracts/info/{contractId}": {
      "get": {
        "description": "Get contract information",
        "summary": "Contract info",
        "tags": [
          "contracts"
        ],
        "operationId": "getContractInfo",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Contract id",
            "x-example": "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns contract info",
            "schema": {
              "$ref": "#/definitions/ContractInfo"
            },
            "headers": {}
          },
          "404": {
            "description": "Contract not found",
            "schema": {}
          }
        }
      }
    },
    "/contracts/status/{id}": {
      "get": {
        "description": "Returns array of execution statuses for executable transaction",
        "summary": "Contract status",
        "tags": [
          "contracts"
        ],
        "operationId": "getContractStatusById",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Executable transaction id",
            "x-example": "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww"
          }
        ],
        "responses": {
          "200": {
            "description": "Contract status",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContractExecutionMessage"
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/contracts/{contractId}/{key}": {
      "get": {
        "description": "Get key value by contract id",
        "summary": "Contract's value for key",
        "tags": [
          "contracts"
        ],
        "operationId": "getKeysValuesByContractIdAndKey",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Contract id",
            "x-example": "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww"
          },
          {
            "name": "key",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Key name",
            "x-example": "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww"
          }
        ],
        "responses": {
          "200": {
            "description": "Data entry",
            "schema": {
              "$ref": "#/definitions/DataEntry"
            },
            "headers": {}
          }
        }
      }
    },
    "/contracts/executed-tx-for/{id}": {
      "get": {
        "description": "Returns executed transaction, if present, for id of executable transaction",
        "summary": "Associated Executed transaction",
        "tags": [
          "contracts"
        ],
        "operationId": "getExecutedTx",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Executable transaction id",
            "x-example": "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww"
          }
        ],
        "responses": {
          "200": {
            "description": "Executed contract transaction",
            "schema": {
              "$ref": "#/definitions/ExecutedContractTransaction"
            },
            "headers": {}
          }
        }
      }
    },
    "/contracts/{contractId}": {
      "get": {
        "description": "Get keys values by contract id",
        "summary": "Contract's state",
        "tags": [
          "contracts"
        ],
        "operationId": "getKeysValuesByContractId",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Contract id",
            "x-example": "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "0",
            "x-example": 42
          },
          {
            "name": "matches",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "URL encoded (percent-encoded) regular expression to filter keys (https://www.tutorialspoint.com/scala/scala_regular_expressions.htm)",
            "x-example": "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "10",
            "x-example": 30
          }
        ],
        "responses": {
          "200": {
            "description": "Returns key values on contract",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DataEntry"
              }
            },
            "headers": {}
          }
        }
      },
      "post": {
        "description": "Returns selected keys values by contract id",
        "summary": "Contract's state",
        "tags": [
          "contracts"
        ],
        "operationId": "getSelectedKeysValuesByContractId",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": false,
            "default": "application/json",
            "type": "string",
            "description": ""
          },
          {
            "name": "contractId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Contract id",
            "x-example": "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Json with array of keys",
            "schema": {
              "$ref": "#/definitions/ContractKeysFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns selected keys values on contract",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DataEntry"
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/contracts/balance/details/{contractId}": {
      "get": {
        "description": "Get contract balance details",
        "summary": "Contract's balance details",
        "tags": [
          "contracts"
        ],
        "operationId": "getContractBalanceDetails",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Contract id",
            "x-example": "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns key values on contract",
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/ContractBalanceDetails"
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/leasing/active/{address}": {
      "get": {
        "description": "List of LeaseTransactions",
        "summary": "Active leases",
        "tags": [
          "leasing"
        ],
        "operationId": "getLeasesesByAddress",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Address",
            "x-example": "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LeaseTransaction"
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/activation/status": {
      "get": {
        "description": "Get activation status of blockchain features",
        "summary": "Feature activation status",
        "tags": [
          "activation"
        ],
        "operationId": "activationStatus",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Json activation status",
            "schema": {
              "$ref": "#/definitions/ActivationStatus"
            },
            "headers": {}
          }
        }
      }
    },
    "/debug/blocks/{howMany}": {
      "get": {
        "description": "Get sizes and full hashes for last blocks",
        "summary": "Block hashes and sizes",
        "tags": [
          "debug"
        ],
        "operationId": "blocksSizes",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "howMany",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "How many last blocks to take",
            "x-example": 20
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/debug/info": {
      "get": {
        "description": "All info you need to debug",
        "summary": "Debug info",
        "tags": [
          "debug"
        ],
        "operationId": "infoDebug",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Json state",
            "schema": {
              "$ref": "#/definitions/AllInfoForDebug"
            },
            "headers": {}
          }
        }
      }
    },
    "/debug/rollback": {
      "post": {
        "description": "Removes all blocks after given height",
        "summary": "Rollback to height",
        "tags": [
          "debug"
        ],
        "operationId": "rollbackToHeight",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": false,
            "default": "application/json",
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Json with data",
            "schema": {
              "$ref": "#/definitions/RollbackParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 if success, 404 if there are no block at this height",
            "schema": {
              "$ref": "#/definitions/RollbackToBlockSignature"
            },
            "headers": {}
          }
        }
      }
    },
    "/debug/validate": {
      "post": {
        "description": "Validates a transaction and measures time spent in milliseconds",
        "summary": "Validate transaction",
        "tags": [
          "debug"
        ],
        "operationId": "validateTransaction",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": false,
            "default": "application/json",
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Signed transaction",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Validation result",
            "schema": {
              "$ref": "#/definitions/DebugValidateResponse"
            },
            "headers": {}
          }
        }
      }
    },
    "/debug/minerInfo": {
      "get": {
        "description": "All miner info you need to debug",
        "summary": "Miner debug info",
        "tags": [
          "debug"
        ],
        "operationId": "minerInfo",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Json state",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DebugMinerInfoResponse"
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/debug/historyInfo": {
      "get": {
        "description": "All history info you need to debug",
        "summary": "History debug info",
        "tags": [
          "debug"
        ],
        "operationId": "historyInfo",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Json state",
            "schema": {
              "$ref": "#/definitions/HistoryInfoForDebug"
            },
            "headers": {}
          }
        }
      }
    },
    "/debug/configInfo": {
      "get": {
        "description": "Currently running node config",
        "summary": "Config info",
        "tags": [
          "debug"
        ],
        "operationId": "configInfo",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "full",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Exposes full typesafe config"
          }
        ],
        "responses": {
          "200": {
            "description": "Full all or node config",
            "headers": {}
          }
        }
      }
    },
    "/debug/rollback-to/{signature}": {
      "delete": {
        "description": "Rollback the state to the block with a given signature",
        "summary": "Rollback to signature",
        "tags": [
          "debug"
        ],
        "operationId": "rollbackToBlockSignature",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "signature",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Signature in Base58 format",
            "x-example": "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww"
          }
        ],
        "responses": {
          "200": {
            "description": "Block signature",
            "schema": {
              "$ref": "#/definitions/RollbackToBlockSignature"
            },
            "headers": {}
          }
        }
      }
    },
    "/debug/portfolios/{address}": {
      "get": {
        "description": "Get current portfolio considering pessimistic transactions in the UTX pool",
        "summary": "Address portfolios",
        "tags": [
          "debug"
        ],
        "operationId": "portfolios",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Address",
            "x-example": "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww"
          },
          {
            "name": "considerUnspent",
            "in": "query",
            "required": false,
            "default": true,
            "type": "boolean",
            "description": "Taking into account pessimistic transactions from UTX pool"
          }
        ],
        "responses": {
          "200": {
            "description": "Json portfolio",
            "schema": {
              "$ref": "#/definitions/PortfolioByAddress"
            },
            "headers": {}
          }
        }
      }
    },
    "/debug/print": {
      "post": {
        "description": "Prints a string at DEBUG level, strips to 250 chars",
        "summary": "Print message to log",
        "tags": [
          "debug"
        ],
        "operationId": "debugPrint",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": false,
            "default": "application/json",
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Json with data",
            "schema": {
              "$ref": "#/definitions/DebugMessage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns empty string every time",
            "headers": {}
          }
        }
      }
    },
    "/debug/state": {
      "get": {
        "description": "Get current state",
        "summary": "Debug state",
        "tags": [
          "debug"
        ],
        "operationId": "stateDebug",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Json state",
            "schema": {
              "$ref": "#/definitions/StateDebug"
            },
            "headers": {}
          }
        }
      }
    },
    "/debug/stateWE/{height}": {
      "get": {
        "description": "Get state at specified height",
        "summary": "Debug state at height",
        "tags": [
          "debug"
        ],
        "operationId": "stateWE_1",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "height",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "Block height",
            "x-example": 50
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/StateDebug"
            },
            "headers": {}
          }
        }
      }
    },
    "/debug/threadDump": {
      "get": {
        "description": "Shows JVM full thread dump",
        "summary": "JVM Thread Dump",
        "tags": [
          "debug"
        ],
        "operationId": "getThreadDump",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "JVM Thread Dump",
            "schema": {
              "type": "string"
            },
            "headers": {}
          }
        }
      }
    },
    "/debug/utx-rebroadcast": {
      "get": {
        "description": "Returns number of rebroadcasted transactions",
        "summary": "Utx rebroadcasting",
        "tags": [
          "debug"
        ],
        "operationId": "utxRebroadcast",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Utx rebroadcasting",
            "schema": {
              "type": "object",
              "txsToBroadcast": {
                "type": "number",
                "format": "double"
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/node/config": {
      "get": {
        "description": "Get node configuration information",
        "summary": "Config",
        "tags": [
          "node"
        ],
        "operationId": "config",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GetNodeConfig"
            },
            "headers": {}
          }
        }
      }
    },
    "/node/logging": {
      "get": {
        "description": "Show loggers and their logging levels",
        "summary": "Logging levels",
        "tags": [
          "node"
        ],
        "operationId": "loggingReadRoute",
        "deprecated": false,
        "produces": [
          "text/plain"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "logging levels",
            "schema": {
              "type": "string"
            },
            "headers": {}
          }
        }
      },
      "post": {
        "description": "change logging levels",
        "summary": "Edit logging level",
        "tags": [
          "node"
        ],
        "operationId": "loggingEditRoute",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": false,
            "default": "application/json",
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Json with logger and desired level",
            "schema": {
              "$ref": "#/definitions/ChangeLoggerLevelRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "logging levels changed",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/node/owner": {
      "get": {
        "description": "Get current node owner's Address and PublicKey",
        "summary": "Node owner Address and PublicKey",
        "tags": [
          "node"
        ],
        "operationId": "nodeOwner",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "current node owner",
            "schema": {
              "$ref": "#/definitions/AddressPublicKeyInfo"
            },
            "headers": {}
          }
        }
      }
    },
    "/node/stop": {
      "post": {
        "description": "Stop the node",
        "summary": "Stop node",
        "tags": [
          "node"
        ],
        "operationId": "stopNode",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/NodeStopResponse"
            },
            "headers": {}
          }
        }
      }
    },
    "/node/status": {
      "get": {
        "description": "Get status of the running core",
        "summary": "Node status",
        "tags": [
          "node"
        ],
        "operationId": "getNodeStatus",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Get node status",
            "schema": {
              "$ref": "#/definitions/NodeStatus"
            },
            "headers": {}
          }
        }
      }
    },
    "/node/healthcheck": {
      "get": {
        "description": "Get external service status",
        "summary": "External service status",
        "tags": [
          "node"
        ],
        "operationId": "getHealthcheck",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "service",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "Service name",
            "x-example": "docker"
          }
        ],
        "responses": {
          "200": {
            "description": "Get external service status",
            "headers": {}
          }
        }
      }
    },
    "/node/version": {
      "get": {
        "description": "Get node version",
        "summary": "Node version",
        "tags": [
          "node"
        ],
        "operationId": "nodeVersion",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Json node version",
            "schema": {
              "$ref": "#/definitions/NodeVersion"
            },
            "headers": {}
          }
        }
      }
    },
    "/node/metrics": {
      "get": {
        "description": "Show metrics status",
        "summary": "Metrics status",
        "tags": [
          "node"
        ],
        "operationId": "getMetricsStatus",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Metrics status",
            "schema": {
              "$ref": "#/definitions/MetricsStatusResponse"
            },
            "headers": {}
          }
        }
      },
      "post": {
        "description": "Update metrics status",
        "summary": "Metrics status",
        "tags": [
          "node"
        ],
        "operationId": "editMetricsStatus",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": false,
            "default": "application/json",
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Json with metrics",
            "schema": {
              "$ref": "#/definitions/MetricsStatusResponse"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Metrics status",
            "schema": {
              "$ref": "#/definitions/MetricsStatusResponse"
            },
            "headers": {}
          }
        }
      }
    },
    "/snapshot/status": {
      "get": {
        "description": "Get current snapshot status",
        "summary": "Snapshot status",
        "tags": [
          "snapshot"
        ],
        "operationId": "getSnapshotStatus",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Snapshot status",
            "schema": {
              "$ref": "#/definitions/SnapshotStatus"
            },
            "headers": {}
          }
        }
      }
    },
    "/snapshot/genesisConfig": {
      "get": {
        "description": "Get snapshot genesis as config",
        "summary": "Snapshot genesis config",
        "tags": [
          "snapshot"
        ],
        "operationId": "getSnapshotGenesisConfig",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Snapshot genesis config",
            "schema": {
              "$ref": "#/definitions/SnapshotGenesisConfig"
            },
            "headers": {}
          }
        }
      }
    },
    "/snapshot/swapState": {
      "post": {
        "description": "Swap data and snapshot",
        "summary": "Swap data and snapshot",
        "tags": [
          "snapshot"
        ],
        "operationId": "swapState",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "backupOldState",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Optionally backup old state"
          }
        ],
        "responses": {
          "200": {
            "description": "Swap result",
            "schema": {
              "$ref": "#/definitions/SwapStateResponse"
            },
            "headers": {}
          }
        }
      }
    }
  },
  "definitions": {
    "AddressPublicKeyInfo": {
      "title": "AddressPublicKeyInfo",
      "type": "object",
      "properties": {
        "address": {
          "example": "3LGBihYhwjDhHbTZKK7eP5oTMHYe5tA14Yf",
          "type": "string"
        },
        "publicKey": {
          "example": "FcWEYLLxVJ1ngfvhYv17ycjhWczopW32nt3wvnNqweSc",
          "type": "string"
        }
      }
    },
    "AssetsBalance": {
      "title": "AssetsBalance",
      "type": "object",
      "properties": {
        "assetId": {
          "example": "Ax9T4grFxx5m3KPUEKjMdnQkCKtBktf694wU2wJYvQUD",
          "type": "string"
        },
        "balance": {
          "example": 4879179221,
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "AssetsBalanceWithAddress": {
      "title": "AssetsBalanceWithAddress",
      "type": "object",
      "properties": {
        "assetId": {
          "example": "Ax9T4grFxx5m3KPUEKjMdnQkCKtBktf694wU2wJYvQUD",
          "type": "string"
        },
        "balance": {
          "example": 4879179221,
          "type": "integer",
          "format": "int64"
        },
        "address": {
          "example": "3Mv61qe6egMSjRDZiiuvJDnf3Q1qW9tTZDB",
          "type": "string"
        }
      }
    },
    "AssetDetails": {
      "title": "AssetDetails",
      "type": "object",
      "properties": {
        "assetId": {
          "example": "3Mv61qe6egMSjRDZiiuvJDnf3Q1qW9tTZDB",
          "type": "string"
        },
        "issueHeight": {
          "example": 30,
          "type": "number",
          "format": "double"
        },
        "issueTimestamp": {
          "example": 1572430914987,
          "type": "number",
          "format": "double"
        },
        "issuer": {
          "example": "3NdBzMBKu9PXkqkT5Sdt73ZzqYUya47SUaA",
          "type": "string"
        },
        "name": {
          "example": "SomeCoin",
          "type": "string"
        },
        "description": {
          "example": "some description",
          "type": "string"
        },
        "decimals": {
          "example": 4,
          "type": "number",
          "format": "double"
        },
        "reissuable": {
          "example": true,
          "type": "boolean"
        },
        "quantity": {
          "example": 10000000,
          "type": "number",
          "format": "double"
        },
        "scripted": {
          "example": true,
          "type": "boolean"
        },
        "sponsorshipIsEnabled": {
          "example": true,
          "type": "boolean"
        },
        "scriptDetails": {
          "$ref": "#/definitions/ScriptDetails"
        }
      }
    },
    "AssetAccountDetails": {
      "title": "AssetAccountDetails",
      "type": "object",
      "properties": {
        "address": {
          "example": "3Mv61qe6egMSjRDZiiuvJDnf3Q1qW9tTZDB",
          "type": "string"
        },
        "balances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Balance2"
          }
        }
      }
    },
    "AssetAccountDetailsV2": {
      "title": "AssetAccountDetailsV2",
      "type": "object",
      "properties": {
        "address": {
          "example": "3Mv61qe6egMSjRDZiiuvJDnf3Q1qW9tTZDB",
          "type": "string"
        },
        "balances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AddressAssetBalance"
          }
        }
      }
    },
    "EstimateScriptComplexity": {
      "title": "EstimateScriptComplexity",
      "type": "object",
      "properties": {
        "script": {
          "example": "3rbFDtbPwAvSp2vBvqGfGR9nRS1nBVnfuSCN3HxSZ7fVRpt3tuFG5JSmyTmvHPxYf34SocMRkRKFgzTtXXnnv7upRHXJzZrLSQo8tUW6yMtEiZ",
          "type": "string"
        },
        "scriptText": {
          "example": "FUNCTION_CALL(FunctionHeader(==,List(LONG, LONG)),List(CONST_LONG(1), CONST_LONG(2)),BOOLEAN)",
          "type": "string"
        },
        "complexity": {
          "example": 11,
          "type": "integer",
          "format": "int32"
        },
        "extraFee": {
          "example": 10001,
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ReloadWallet": {
      "title": "ReloadWallet",
      "type": "object",
      "properties": {
        "message": {
          "example": "Wallet reloaded successfully",
          "type": "string"
        }
      }
    },
    "SignMessageByAddressRequest": {
      "title": "SignMessageByAddressRequest",
      "type": "object",
      "properties": {
        "message": {
          "example": "some text",
          "type": "string"
        },
        "password": {
          "example": "some-password",
          "type": "string"
        }
      },
      "required": [
        "message"
      ]
    },
    "HashFastSecureMessage": {
      "title": "HashFastSecureMessage",
      "type": "object",
      "properties": {
        "message": {
          "example": "ridethewaves!",
          "type": "string"
        },
        "hash": {
          "example": "DJ35ymschUFDmqCnDJewjcnVExVkWgX7mJDXhFy9X8oQ",
          "type": "string"
        }
      }
    },
    "HashSecureMessage": {
      "title": "HashSecureMessage",
      "type": "object",
      "properties": {
        "message": {
          "example": "ridethewaves!",
          "type": "string"
        },
        "hash": {
          "example": "H6nsiifwYKYEx6YzYD7woP1XCn72RVvx6tC1zjjLXqsu",
          "type": "string"
        }
      }
    },
    "UtilsTime": {
      "title": "UtilsTime",
      "type": "object",
      "properties": {
        "system": {
          "example": 1544715343390,
          "type": "integer",
          "format": "int64"
        },
        "NTP": {
          "example": 1544715343390,
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "StateDebug": {
      "title": "StateDebug",
      "type": "object",
      "properties": {
        "3NgvkiorxzB1M3vkS9jQYSmmRDaYGPEwWCP": {
          "example": 367854817033914,
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "PortfolioByAddress": {
      "title": "PortfolioByAddress",
      "type": "object",
      "properties": {
        "balance": {
          "example": 104665861710336,
          "type": "integer",
          "format": "int64"
        },
        "lease": {
          "$ref": "#/definitions/Lease"
        },
        "assets": {
          "type": "object"
        }
      }
    },
    "RollbackToBlockSignature": {
      "title": "RollbackToBlockSignature",
      "type": "object",
      "properties": {
        "BlockId": {
          "example": "4U4Hmg4mDYrvxaZ3JVzL1Z1piPDZ1PJ61vd1PeS7ESZFkHsUCUqeeAZoszTVr43Z4NV44dqbLv9WdrLytDL6gHuv",
          "type": "string"
        }
      }
    },
    "HistoryInfoForDebug": {
      "title": "HistoryInfoForDebug",
      "type": "object",
      "properties": {
        "lastBlockIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "microBlockIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "AllInfoForDebug": {
      "title": "AllInfoForDebug",
      "type": "object",
      "properties": {
        "stateHeight": {
          "example": 12329,
          "type": "integer",
          "format": "int32"
        },
        "extensionLoaderState": {
          "example": "State(Idle,Idle)",
          "type": "string"
        },
        "historyReplierCacheSizes": {
          "$ref": "#/definitions/HistoryReplierCacheSizes"
        },
        "microBlockSynchronizerCacheSizes": {
          "$ref": "#/definitions/MicroBlockSynchronizerCacheSizes"
        },
        "scoreObserverStats": {
          "$ref": "#/definitions/ScoreObserverStats"
        },
        "minerState": {
          "example": "mining blocks",
          "type": "string"
        }
      }
    },
    "GetNodeConfig": {
      "title": "GetNodeConfig",
      "type": "object",
      "properties": {
        "version": {
          "example": "WE v1.0.0",
          "type": "string"
        },
        "cryptoType": {
          "example": "WAVES",
          "type": "string"
        },
        "chainId": {
          "example": "D",
          "type": "string"
        },
        "consensus": {
          "example": "POS",
          "type": "string"
        },
        "minimumFee": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalFee": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32"
          }
        },
        "maxTransactionsInMicroBlock": {
          "example": 500,
          "type": "integer",
          "format": "int32"
        },
        "minMicroBlockAge": {
          "example": 1000,
          "type": "integer",
          "format": "int64"
        },
        "microBlockInterval": {
          "example": 1000,
          "type": "integer",
          "format": "int64"
        },
        "blockTiming": {
          "$ref": "#/definitions/BlockTimingInfo"
        }
      }
    },
    "BlockTimingInfo": {
      "title": "BlockTimingInfo",
      "type": "object",
      "properties": {
        "averageBlockDelay": {
          "example": 40000,
          "type": "integer",
          "format": "int64"
        },
        "roundDuration": {
          "example": 17000,
          "type": "integer",
          "format": "int64"
        },
        "syncDuration": {
          "example": 3000,
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "NodeStatus": {
      "title": "NodeStatus",
      "type": "object",
      "properties": {
        "blockchainHeight": {
          "example": 47041,
          "type": "integer",
          "format": "int32"
        },
        "stateHeight": {
          "example": 47041,
          "type": "integer",
          "format": "int32"
        },
        "updatedTimestamp": {
          "example": 1544709501138,
          "type": "integer",
          "format": "int64"
        },
        "updatedDate": {
          "example": "2018-12-13T13:58:21.138Z",
          "type": "string"
        }
      }
    },
    "NodeVersion": {
      "title": "NodeVersion",
      "type": "object",
      "properties": {
        "version": {
          "example": "WE v1.0.0",
          "type": "string"
        }
      }
    },
    "Anchoring": {
      "title": "Anchoring",
      "type": "object",
      "properties": {
        "enabled": {
          "example": true,
          "type": "boolean"
        },
        "currentChainOwnerAddress": {
          "example": "3FWwx4o1177A4oeHAEW5EQ6Bkn4Lv48quYz",
          "type": "string"
        },
        "mainnetNodeAddress": {
          "example": "https://node",
          "type": "string"
        },
        "mainnetSchemeByte": {
          "example": "L",
          "type": "string"
        },
        "mainnetRecipientAddress": {
          "example": 8000000,
          "type": "integer",
          "format": "int32"
        },
        "currentChainFee": {
          "example": 666666,
          "type": "integer",
          "format": "int32"
        },
        "heightRange": {
          "example": 5,
          "type": "integer",
          "format": "int32"
        },
        "heightAbove": {
          "example": 3,
          "type": "integer",
          "format": "int32"
        },
        "threshold": {
          "example": 10,
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Transaction": {
      "title": "Transaction",
      "type": "object",
      "properties": {
        "chainId": {
          "example": 1,
          "type": "number",
          "format": "double"
        },
        "senderPublicKey": {
          "example": "D56Gk8tvSAhNesghXgjAw67rSYDf4F2vo7HmsFTuGweC",
          "type": "string"
        },
        "sender": {
          "example": "3NotQaBygbSvYZW4ftJ2ZwLXex4rTHY1Qzn",
          "type": "string"
        },
        "proofs": {
          "example": [
            "5wMeGz4xzrs1AYJQR7DQU8jK8KJZ4g7HGxiGiZ1H8rfUHJKyKxTcZWFWHhojWuJMjst6kbDYL4EkcV2GyXKffyPU"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "fee": {
          "example": 500,
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "example": "DP5MggKC8GJuLZshCVNSYwBtE6WTRtMM1YPPdcmwbuNg",
          "type": "string"
        },
        "version": {
          "example": 1,
          "type": "integer",
          "format": "int32"
        },
        "timestamp": {
          "example": 1568294945927,
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "IssueTransaction": {
      "title": "IssueTransaction",
      "type": "object",
      "properties": {
        "chainId": {
          "example": 1,
          "type": "number",
          "format": "double"
        },
        "senderPublicKey": {
          "example": "D56Gk8tvSAhNesghXgjAw67rSYDf4F2vo7HmsFTuGweC",
          "type": "string"
        },
        "sender": {
          "example": "3NotQaBygbSvYZW4ftJ2ZwLXex4rTHY1Qzn",
          "type": "string"
        },
        "proofs": {
          "example": [
            "5wMeGz4xzrs1AYJQR7DQU8jK8KJZ4g7HGxiGiZ1H8rfUHJKyKxTcZWFWHhojWuJMjst6kbDYL4EkcV2GyXKffyPU"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "fee": {
          "example": 500,
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "example": "DP5MggKC8GJuLZshCVNSYwBtE6WTRtMM1YPPdcmwbuNg",
          "type": "string"
        },
        "version": {
          "example": 1,
          "type": "integer",
          "format": "int32"
        },
        "timestamp": {
          "example": 1568294945927,
          "type": "integer",
          "format": "int64"
        },
        "type": {
          "example": 3,
          "type": "integer",
          "default": "3",
          "format": "int32"
        },
        "script": {
          "example": "3rbFDtbPwAvSp2vBvqGfGR9nRS1nBVnfuSCN3HxSZ7fVRpt3tuFG5JSmyTmvHPxYf34SocMRkRKFgzTtXXnnv7upRHXJzZrLSQo8tUW6yMtEiZ",
          "type": "string"
        },
        "assetId": {
          "example": "E9yZC4cVhCDfbjFJCc9CqkAtkoFy5KaCe64iaxHM2adG",
          "type": "string"
        },
        "name": {
          "example": "SomeAsset",
          "type": "string"
        },
        "quantity": {
          "example": 1000000000,
          "type": "integer",
          "format": "int32"
        },
        "reissuable": {
          "example": false,
          "type": "boolean"
        },
        "decimals": {
          "example": 4,
          "type": "integer",
          "format": "int32"
        },
        "description": {
          "example": "Some description",
          "type": "string"
        }
      },
      "required": [
        "type"
      ]
    },
    "TransferTransaction": {
      "title": "TransferTransaction",
      "type": "object",
      "properties": {
        "chainId": {
          "example": 1,
          "type": "number",
          "format": "double"
        },
        "senderPublicKey": {
          "example": "D56Gk8tvSAhNesghXgjAw67rSYDf4F2vo7HmsFTuGweC",
          "type": "string"
        },
        "sender": {
          "example": "3NotQaBygbSvYZW4ftJ2ZwLXex4rTHY1Qzn",
          "type": "string"
        },
        "proofs": {
          "example": [
            "5wMeGz4xzrs1AYJQR7DQU8jK8KJZ4g7HGxiGiZ1H8rfUHJKyKxTcZWFWHhojWuJMjst6kbDYL4EkcV2GyXKffyPU"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "fee": {
          "example": 500,
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "example": "DP5MggKC8GJuLZshCVNSYwBtE6WTRtMM1YPPdcmwbuNg",
          "type": "string"
        },
        "version": {
          "example": 1,
          "type": "integer",
          "format": "int32"
        },
        "timestamp": {
          "example": 1568294945927,
          "type": "integer",
          "format": "int64"
        },
        "type": {
          "example": 4,
          "type": "integer",
          "default": "4",
          "format": "int32"
        },
        "recipient": {
          "example": "3NBVqYXrapgJP9atQccdBPAgJPwHDKkh6A8",
          "type": "string"
        },
        "assetId": {
          "example": "E9yZC4cVhCDfbjFJCc9CqkAtkoFy5KaCe64iaxHM2adG",
          "type": "string"
        },
        "feeAssetId": {
          "example": "E9yZC4cVhCDfbjFJCc9CqkAtkoFy5KaCe64iaxHM2adG",
          "type": "string"
        },
        "amount": {
          "example": 100000,
          "type": "integer",
          "format": "int32"
        },
        "attachment": {
          "example": "string",
          "type": "string"
        },
        "height": {
          "example": 30,
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "type"
      ]
    },
    "ReissueTransaction": {
      "title": "ReissueTransaction",
      "type": "object",
      "properties": {
        "chainId": {
          "example": 1,
          "type": "number",
          "format": "double"
        },
        "senderPublicKey": {
          "example": "D56Gk8tvSAhNesghXgjAw67rSYDf4F2vo7HmsFTuGweC",
          "type": "string"
        },
        "sender": {
          "example": "3NotQaBygbSvYZW4ftJ2ZwLXex4rTHY1Qzn",
          "type": "string"
        },
        "proofs": {
          "example": [
            "5wMeGz4xzrs1AYJQR7DQU8jK8KJZ4g7HGxiGiZ1H8rfUHJKyKxTcZWFWHhojWuJMjst6kbDYL4EkcV2GyXKffyPU"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "fee": {
          "example": 500,
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "example": "DP5MggKC8GJuLZshCVNSYwBtE6WTRtMM1YPPdcmwbuNg",
          "type": "string"
        },
        "version": {
          "example": 1,
          "type": "integer",
          "format": "int32"
        },
        "timestamp": {
          "example": 1568294945927,
          "type": "integer",
          "format": "int64"
        },
        "type": {
          "example": 5,
          "type": "integer",
          "default": "5",
          "format": "int32"
        },
        "assetId": {
          "example": "E9yZC4cVhCDfbjFJCc9CqkAtkoFy5KaCe64iaxHM2adG",
          "type": "string"
        },
        "quantity": {
          "example": 1000000000,
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "type"
      ]
    },
    "BurnTransaction": {
      "title": "BurnTransaction",
      "type": "object",
      "properties": {
        "chainId": {
          "example": 1,
          "type": "number",
          "format": "double"
        },
        "senderPublicKey": {
          "example": "D56Gk8tvSAhNesghXgjAw67rSYDf4F2vo7HmsFTuGweC",
          "type": "string"
        },
        "sender": {
          "example": "3NotQaBygbSvYZW4ftJ2ZwLXex4rTHY1Qzn",
          "type": "string"
        },
        "proofs": {
          "example": [
            "5wMeGz4xzrs1AYJQR7DQU8jK8KJZ4g7HGxiGiZ1H8rfUHJKyKxTcZWFWHhojWuJMjst6kbDYL4EkcV2GyXKffyPU"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "fee": {
          "example": 500,
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "example": "DP5MggKC8GJuLZshCVNSYwBtE6WTRtMM1YPPdcmwbuNg",
          "type": "string"
        },
        "version": {
          "example": 1,
          "type": "integer",
          "format": "int32"
        },
        "timestamp": {
          "example": 1568294945927,
          "type": "integer",
          "format": "int64"
        },
        "type": {
          "example": 6,
          "type": "integer",
          "default": "6",
          "format": "int32"
        },
        "assetId": {
          "example": "E9yZC4cVhCDfbjFJCc9CqkAtkoFy5KaCe64iaxHM2adG",
          "type": "string"
        },
        "quantity": {
          "example": 1000000000,
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "type"
      ]
    },
    "LeaseTransaction": {
      "title": "LeaseTransaction",
      "type": "object",
      "properties": {
        "chainId": {
          "example": 1,
          "type": "number",
          "format": "double"
        },
        "senderPublicKey": {
          "example": "D56Gk8tvSAhNesghXgjAw67rSYDf4F2vo7HmsFTuGweC",
          "type": "string"
        },
        "sender": {
          "example": "3NotQaBygbSvYZW4ftJ2ZwLXex4rTHY1Qzn",
          "type": "string"
        },
        "proofs": {
          "example": [
            "5wMeGz4xzrs1AYJQR7DQU8jK8KJZ4g7HGxiGiZ1H8rfUHJKyKxTcZWFWHhojWuJMjst6kbDYL4EkcV2GyXKffyPU"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "fee": {
          "example": 500,
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "example": "DP5MggKC8GJuLZshCVNSYwBtE6WTRtMM1YPPdcmwbuNg",
          "type": "string"
        },
        "version": {
          "example": 1,
          "type": "integer",
          "format": "int32"
        },
        "timestamp": {
          "example": 1568294945927,
          "type": "integer",
          "format": "int64"
        },
        "type": {
          "example": 8,
          "type": "integer",
          "default": "8",
          "format": "int32"
        },
        "recipient": {
          "example": "3NBVqYXrapgJP9atQccdBPAgJPwHDKkh6A8",
          "type": "string"
        },
        "amount": {
          "example": 100000,
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "type"
      ]
    },
    "LeaseCancelTransaction": {
      "title": "LeaseCancelTransaction",
      "type": "object",
      "properties": {
        "chainId": {
          "example": 1,
          "type": "number",
          "format": "double"
        },
        "senderPublicKey": {
          "example": "D56Gk8tvSAhNesghXgjAw67rSYDf4F2vo7HmsFTuGweC",
          "type": "string"
        },
        "sender": {
          "example": "3NotQaBygbSvYZW4ftJ2ZwLXex4rTHY1Qzn",
          "type": "string"
        },
        "proofs": {
          "example": [
            "5wMeGz4xzrs1AYJQR7DQU8jK8KJZ4g7HGxiGiZ1H8rfUHJKyKxTcZWFWHhojWuJMjst6kbDYL4EkcV2GyXKffyPU"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "fee": {
          "example": 500,
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "example": "DP5MggKC8GJuLZshCVNSYwBtE6WTRtMM1YPPdcmwbuNg",
          "type": "string"
        },
        "version": {
          "example": 1,
          "type": "integer",
          "format": "int32"
        },
        "timestamp": {
          "example": 1568294945927,
          "type": "integer",
          "format": "int64"
        },
        "type": {
          "example": 9,
          "type": "integer",
          "default": "9",
          "format": "int32"
        },
        "leaseId": {
          "example": "E9yZC4cVhCDfbjFJCc9CqkAtkoFy5KaCe64iaxHM2adG",
          "type": "string"
        }
      },
      "required": [
        "type"
      ]
    },
    "CreateAliasTransaction": {
      "title": "CreateAliasTransaction",
      "type": "object",
      "properties": {
        "chainId": {
          "example": 1,
          "type": "number",
          "format": "double"
        },
        "senderPublicKey": {
          "example": "D56Gk8tvSAhNesghXgjAw67rSYDf4F2vo7HmsFTuGweC",
          "type": "string"
        },
        "sender": {
          "example": "3NotQaBygbSvYZW4ftJ2ZwLXex4rTHY1Qzn",
          "type": "string"
        },
        "proofs": {
          "example": [
            "5wMeGz4xzrs1AYJQR7DQU8jK8KJZ4g7HGxiGiZ1H8rfUHJKyKxTcZWFWHhojWuJMjst6kbDYL4EkcV2GyXKffyPU"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "fee": {
          "example": 500,
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "example": "DP5MggKC8GJuLZshCVNSYwBtE6WTRtMM1YPPdcmwbuNg",
          "type": "string"
        },
        "version": {
          "example": 1,
          "type": "integer",
          "format": "int32"
        },
        "timestamp": {
          "example": 1568294945927,
          "type": "integer",
          "format": "int64"
        },
        "type": {
          "example": 10,
          "type": "integer",
          "default": "10",
          "format": "int32"
        },
        "alias": {
          "example": "John",
          "type": "string"
        }
      },
      "required": [
        "type"
      ]
    },
    "MassTransferTransaction": {
      "title": "MassTransferTransaction",
      "type": "object",
      "properties": {
        "chainId": {
          "example": 1,
          "type": "number",
          "format": "double"
        },
        "senderPublicKey": {
          "example": "D56Gk8tvSAhNesghXgjAw67rSYDf4F2vo7HmsFTuGweC",
          "type": "string"
        },
        "sender": {
          "example": "3NotQaBygbSvYZW4ftJ2ZwLXex4rTHY1Qzn",
          "type": "string"
        },
        "proofs": {
          "example": [
            "5wMeGz4xzrs1AYJQR7DQU8jK8KJZ4g7HGxiGiZ1H8rfUHJKyKxTcZWFWHhojWuJMjst6kbDYL4EkcV2GyXKffyPU"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "fee": {
          "example": 500,
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "example": "DP5MggKC8GJuLZshCVNSYwBtE6WTRtMM1YPPdcmwbuNg",
          "type": "string"
        },
        "version": {
          "example": 1,
          "type": "integer",
          "format": "int32"
        },
        "timestamp": {
          "example": 1568294945927,
          "type": "integer",
          "format": "int64"
        },
        "type": {
          "example": 11,
          "type": "integer",
          "default": "11",
          "format": "int32"
        },
        "assetId": {
          "example": "E9yZC4cVhCDfbjFJCc9CqkAtkoFy5KaCe64iaxHM2adG",
          "type": "string"
        },
        "transfersCount": {
          "example": 2,
          "type": "number",
          "format": "double"
        },
        "totalAmount": {
          "example": 187350000,
          "type": "number",
          "format": "double"
        },
        "transfers": {
          "type": "array",
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "attachment": {
          "example": "3rbFDtbPwAvSp2vBvqGfGR9PxYf34SocMRkRKFgzTtXXnnv7upRHXJzZrLSQo8tUW6yMtEiZ",
          "type": "string"
        }
      },
      "required": [
        "type"
      ]
    },
    "DataTransaction": {
      "title": "DataTransaction",
      "type": "object",
      "properties": {
        "chainId": {
          "example": 1,
          "type": "number",
          "format": "double"
        },
        "senderPublicKey": {
          "example": "D56Gk8tvSAhNesghXgjAw67rSYDf4F2vo7HmsFTuGweC",
          "type": "string"
        },
        "sender": {
          "example": "3NotQaBygbSvYZW4ftJ2ZwLXex4rTHY1Qzn",
          "type": "string"
        },
        "proofs": {
          "example": [
            "5wMeGz4xzrs1AYJQR7DQU8jK8KJZ4g7HGxiGiZ1H8rfUHJKyKxTcZWFWHhojWuJMjst6kbDYL4EkcV2GyXKffyPU"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "fee": {
          "example": 500,
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "example": "DP5MggKC8GJuLZshCVNSYwBtE6WTRtMM1YPPdcmwbuNg",
          "type": "string"
        },
        "version": {
          "example": 1,
          "type": "integer",
          "format": "int32"
        },
        "timestamp": {
          "example": 1568294945927,
          "type": "integer",
          "format": "int64"
        },
        "type": {
          "$ref": "#/definitions/DataTransactionType"
        },
        "author": {
          "example": "3NotQaBygbSvYZW4ftJ2ZwLXex4rTHY1Qzn",
          "type": "string"
        },
        "authorPublicKey": {
          "example": "D56Gk8tvSAhNesghXgjAw67rSYDf4F2vo7HmsFTuGweC",
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataEntry"
          }
        }
      }
    },
    "SetScriptTransaction": {
      "title": "SetScriptTransaction",
      "type": "object",
      "properties": {
        "chainId": {
          "example": 1,
          "type": "number",
          "format": "double"
        },
        "senderPublicKey": {
          "example": "D56Gk8tvSAhNesghXgjAw67rSYDf4F2vo7HmsFTuGweC",
          "type": "string"
        },
        "sender": {
          "example": "3NotQaBygbSvYZW4ftJ2ZwLXex4rTHY1Qzn",
          "type": "string"
        },
        "proofs": {
          "example": [
            "5wMeGz4xzrs1AYJQR7DQU8jK8KJZ4g7HGxiGiZ1H8rfUHJKyKxTcZWFWHhojWuJMjst6kbDYL4EkcV2GyXKffyPU"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "fee": {
          "example": 500,
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "example": "DP5MggKC8GJuLZshCVNSYwBtE6WTRtMM1YPPdcmwbuNg",
          "type": "string"
        },
        "version": {
          "example": 1,
          "type": "integer",
          "format": "int32"
        },
        "timestamp": {
          "example": 1568294945927,
          "type": "integer",
          "format": "int64"
        },
        "type": {
          "$ref": "#/definitions/SetScriptTransactionType"
        },
        "script": {
          "example": "3NotQaBygbSvYZW4ftJ2ZwLXex4rTHY1Qzn",
          "type": "string"
        },
        "name": {
          "example": "D56Gk8tvSAhNesghXgjAw67rSYDf4F2vo7HmsFTuGweC",
          "type": "string"
        },
        "description": {
          "example": "Some script",
          "type": "string"
        }
      }
    },
    "SetAssetScriptTransaction": {
      "title": "SetAssetScriptTransaction",
      "type": "object",
      "properties": {
        "chainId": {
          "example": 1,
          "type": "number",
          "format": "double"
        },
        "senderPublicKey": {
          "example": "D56Gk8tvSAhNesghXgjAw67rSYDf4F2vo7HmsFTuGweC",
          "type": "string"
        },
        "sender": {
          "example": "3NotQaBygbSvYZW4ftJ2ZwLXex4rTHY1Qzn",
          "type": "string"
        },
        "proofs": {
          "example": [
            "5wMeGz4xzrs1AYJQR7DQU8jK8KJZ4g7HGxiGiZ1H8rfUHJKyKxTcZWFWHhojWuJMjst6kbDYL4EkcV2GyXKffyPU"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "fee": {
          "example": 500,
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "example": "DP5MggKC8GJuLZshCVNSYwBtE6WTRtMM1YPPdcmwbuNg",
          "type": "string"
        },
        "version": {
          "example": 1,
          "type": "integer",
          "format": "int32"
        },
        "timestamp": {
          "example": 1568294945927,
          "type": "integer",
          "format": "int64"
        },
        "type": {
          "$ref": "#/definitions/SetAssetScriptTransactionType"
        },
        "script": {
          "type": "string",
          "format": "binary"
        },
        "assetId": {
          "example": "E9yZC4cVhCDfbjFJCc9CqkAtkoFy5KaCe64iaxHM2adG",
          "type": "string"
        }
      }
    },
    "PermissionTransaction": {
      "title": "PermissionTransaction",
      "type": "object",
      "properties": {
        "chainId": {
          "example": 1,
          "type": "number",
          "format": "double"
        },
        "senderPublicKey": {
          "example": "D56Gk8tvSAhNesghXgjAw67rSYDf4F2vo7HmsFTuGweC",
          "type": "string"
        },
        "sender": {
          "example": "3NotQaBygbSvYZW4ftJ2ZwLXex4rTHY1Qzn",
          "type": "string"
        },
        "proofs": {
          "example": [
            "5wMeGz4xzrs1AYJQR7DQU8jK8KJZ4g7HGxiGiZ1H8rfUHJKyKxTcZWFWHhojWuJMjst6kbDYL4EkcV2GyXKffyPU"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "fee": {
          "example": 500,
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "example": "DP5MggKC8GJuLZshCVNSYwBtE6WTRtMM1YPPdcmwbuNg",
          "type": "string"
        },
        "version": {
          "example": 1,
          "type": "integer",
          "format": "int32"
        },
        "timestamp": {
          "example": 1568294945927,
          "type": "integer",
          "format": "int64"
        },
        "type": {
          "$ref": "#/definitions/PermitTransactionType"
        },
        "target": {
          "example": "3NkZd8Xd4KsuPiNVsuphRNCZE3SqJycqv8d",
          "type": "string"
        },
        "opType": {
          "$ref": "#/definitions/OpType"
        },
        "dueTimestamp": {
          "example": 1572600785208,
          "type": "integer",
          "format": "int64"
        },
        "role": {
          "$ref": "#/definitions/Role"
        }
      }
    },
    "CreateContractTransaction": {
      "title": "CreateContractTransaction",
      "type": "object",
      "properties": {
        "chainId": {
          "example": 1,
          "type": "number",
          "format": "double"
        },
        "senderPublicKey": {
          "example": "D56Gk8tvSAhNesghXgjAw67rSYDf4F2vo7HmsFTuGweC",
          "type": "string"
        },
        "sender": {
          "example": "3NotQaBygbSvYZW4ftJ2ZwLXex4rTHY1Qzn",
          "type": "string"
        },
        "proofs": {
          "example": [
            "5wMeGz4xzrs1AYJQR7DQU8jK8KJZ4g7HGxiGiZ1H8rfUHJKyKxTcZWFWHhojWuJMjst6kbDYL4EkcV2GyXKffyPU"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "fee": {
          "example": 500,
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "example": "DP5MggKC8GJuLZshCVNSYwBtE6WTRtMM1YPPdcmwbuNg",
          "type": "string"
        },
        "version": {
          "example": 1,
          "type": "integer",
          "format": "int32"
        },
        "timestamp": {
          "example": 1568294945927,
          "type": "integer",
          "format": "int64"
        },
        "type": {
          "$ref": "#/definitions/CreateContractTransactionType"
        },
        "image": {
          "example": "localhost:5000/smart-kv",
          "type": "string"
        },
        "imageHash": {
          "example": "b48d1de58c39d2160a4b8a5a9cae90818da1212742ec1f11fba1209bed0a212c",
          "type": "string"
        },
        "contractName": {
          "example": "SomeName",
          "type": "string"
        },
        "params": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataEntry"
          }
        }
      }
    },
    "CallContractTransaction": {
      "title": "CallContractTransaction",
      "type": "object",
      "properties": {
        "chainId": {
          "example": 1,
          "type": "number",
          "format": "double"
        },
        "senderPublicKey": {
          "example": "D56Gk8tvSAhNesghXgjAw67rSYDf4F2vo7HmsFTuGweC",
          "type": "string"
        },
        "sender": {
          "example": "3NotQaBygbSvYZW4ftJ2ZwLXex4rTHY1Qzn",
          "type": "string"
        },
        "proofs": {
          "example": [
            "5wMeGz4xzrs1AYJQR7DQU8jK8KJZ4g7HGxiGiZ1H8rfUHJKyKxTcZWFWHhojWuJMjst6kbDYL4EkcV2GyXKffyPU"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "fee": {
          "example": 500,
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "example": "DP5MggKC8GJuLZshCVNSYwBtE6WTRtMM1YPPdcmwbuNg",
          "type": "string"
        },
        "version": {
          "example": 1,
          "type": "integer",
          "format": "int32"
        },
        "timestamp": {
          "example": 1568294945927,
          "type": "integer",
          "format": "int64"
        },
        "type": {
          "$ref": "#/definitions/CallContractTransactionType"
        },
        "contractId": {
          "example": "DP5MggKC8GJuLZshCVNSYwBtE6WTRtMM1YPPdcmwbuNg",
          "type": "string"
        },
        "params": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataEntry"
          }
        }
      }
    },
    "ExecutedContractTransaction": {
      "title": "ExecutedContractTransaction",
      "type": "object",
      "properties": {
        "chainId": {
          "example": 1,
          "type": "number",
          "format": "double"
        },
        "senderPublicKey": {
          "example": "D56Gk8tvSAhNesghXgjAw67rSYDf4F2vo7HmsFTuGweC",
          "type": "string"
        },
        "sender": {
          "example": "3NotQaBygbSvYZW4ftJ2ZwLXex4rTHY1Qzn",
          "type": "string"
        },
        "proofs": {
          "example": [
            "5wMeGz4xzrs1AYJQR7DQU8jK8KJZ4g7HGxiGiZ1H8rfUHJKyKxTcZWFWHhojWuJMjst6kbDYL4EkcV2GyXKffyPU"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "fee": {
          "example": 500,
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "example": "DP5MggKC8GJuLZshCVNSYwBtE6WTRtMM1YPPdcmwbuNg",
          "type": "string"
        },
        "version": {
          "example": 1,
          "type": "integer",
          "format": "int32"
        },
        "timestamp": {
          "example": 1568294945927,
          "type": "integer",
          "format": "int64"
        },
        "type": {
          "$ref": "#/definitions/ExecutedContractTransactionType"
        },
        "tx": {
          "type": "object"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataEntry"
          }
        }
      }
    },
    "DisableContractTransaction": {
      "title": "DisableContractTransaction",
      "type": "object",
      "properties": {
        "chainId": {
          "example": 1,
          "type": "number",
          "format": "double"
        },
        "senderPublicKey": {
          "example": "D56Gk8tvSAhNesghXgjAw67rSYDf4F2vo7HmsFTuGweC",
          "type": "string"
        },
        "sender": {
          "example": "3NotQaBygbSvYZW4ftJ2ZwLXex4rTHY1Qzn",
          "type": "string"
        },
        "proofs": {
          "example": [
            "5wMeGz4xzrs1AYJQR7DQU8jK8KJZ4g7HGxiGiZ1H8rfUHJKyKxTcZWFWHhojWuJMjst6kbDYL4EkcV2GyXKffyPU"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "fee": {
          "example": 500,
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "example": "DP5MggKC8GJuLZshCVNSYwBtE6WTRtMM1YPPdcmwbuNg",
          "type": "string"
        },
        "version": {
          "example": 1,
          "type": "integer",
          "format": "int32"
        },
        "timestamp": {
          "example": 1568294945927,
          "type": "integer",
          "format": "int64"
        },
        "type": {
          "$ref": "#/definitions/DisableContractTransactionType"
        },
        "contractId": {
          "example": "DP5MggKC8GJuLZshCVNSYwBtE6WTRtMM1YPPdcmwbuNg",
          "type": "string"
        }
      }
    },
    "RegisterNodeTransaction": {
      "title": "RegisterNodeTransaction",
      "type": "object",
      "properties": {
        "chainId": {
          "example": 1,
          "type": "number",
          "format": "double"
        },
        "senderPublicKey": {
          "example": "D56Gk8tvSAhNesghXgjAw67rSYDf4F2vo7HmsFTuGweC",
          "type": "string"
        },
        "sender": {
          "example": "3NotQaBygbSvYZW4ftJ2ZwLXex4rTHY1Qzn",
          "type": "string"
        },
        "proofs": {
          "example": [
            "5wMeGz4xzrs1AYJQR7DQU8jK8KJZ4g7HGxiGiZ1H8rfUHJKyKxTcZWFWHhojWuJMjst6kbDYL4EkcV2GyXKffyPU"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "fee": {
          "example": 500,
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "example": "DP5MggKC8GJuLZshCVNSYwBtE6WTRtMM1YPPdcmwbuNg",
          "type": "string"
        },
        "version": {
          "example": 1,
          "type": "integer",
          "format": "int32"
        },
        "timestamp": {
          "example": 1568294945927,
          "type": "integer",
          "format": "int64"
        },
        "type": {
          "$ref": "#/definitions/RegisterNodeTransactionType"
        },
        "target": {
          "example": "3NotQaBygbSvYZW4ftJ2ZwLXex4rTHY1Qzn",
          "type": "string"
        },
        "targetPubKey": {
          "example": "D56Gk8tvSAhNesghXgjAw67rSYDf4F2vo7HmsFTuGweC",
          "type": "string"
        },
        "opType": {
          "$ref": "#/definitions/OpType"
        },
        "nodeName": {
          "example": "SomeName",
          "type": "string"
        }
      }
    },
    "CreatePolicyTransaction": {
      "title": "CreatePolicyTransaction",
      "type": "object",
      "properties": {
        "chainId": {
          "example": 1,
          "type": "number",
          "format": "double"
        },
        "senderPublicKey": {
          "example": "D56Gk8tvSAhNesghXgjAw67rSYDf4F2vo7HmsFTuGweC",
          "type": "string"
        },
        "sender": {
          "example": "3NotQaBygbSvYZW4ftJ2ZwLXex4rTHY1Qzn",
          "type": "string"
        },
        "proofs": {
          "example": [
            "5wMeGz4xzrs1AYJQR7DQU8jK8KJZ4g7HGxiGiZ1H8rfUHJKyKxTcZWFWHhojWuJMjst6kbDYL4EkcV2GyXKffyPU"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "fee": {
          "example": 500,
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "example": "DP5MggKC8GJuLZshCVNSYwBtE6WTRtMM1YPPdcmwbuNg",
          "type": "string"
        },
        "version": {
          "example": 1,
          "type": "integer",
          "format": "int32"
        },
        "timestamp": {
          "example": 1568294945927,
          "type": "integer",
          "format": "int64"
        },
        "type": {
          "$ref": "#/definitions/CreatePolicyTransactionType"
        },
        "policyName": {
          "example": "SomeName",
          "type": "string"
        },
        "description": {
          "example": "some policy",
          "type": "string"
        },
        "owners": {
          "example": [
            "3NotQaBygbSvYZW4ftJ2ZwLXex4rTHY1Qzn",
            "3votNaBcgb25FdsdgsdSvYZW4ftJ2ZwLXex"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "recipients": {
          "example": [
            "3NotQaBygbSvYZW4ftJ2ZwLXex4rTHY1Qzn",
            "3votNaBcgb25FdsdgsdSvYZW4ftJ2ZwLXex"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "UpdatePolicyTransaction": {
      "title": "UpdatePolicyTransaction",
      "type": "object",
      "properties": {
        "chainId": {
          "example": 1,
          "type": "number",
          "format": "double"
        },
        "senderPublicKey": {
          "example": "D56Gk8tvSAhNesghXgjAw67rSYDf4F2vo7HmsFTuGweC",
          "type": "string"
        },
        "sender": {
          "example": "3NotQaBygbSvYZW4ftJ2ZwLXex4rTHY1Qzn",
          "type": "string"
        },
        "proofs": {
          "example": [
            "5wMeGz4xzrs1AYJQR7DQU8jK8KJZ4g7HGxiGiZ1H8rfUHJKyKxTcZWFWHhojWuJMjst6kbDYL4EkcV2GyXKffyPU"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "fee": {
          "example": 500,
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "example": "DP5MggKC8GJuLZshCVNSYwBtE6WTRtMM1YPPdcmwbuNg",
          "type": "string"
        },
        "version": {
          "example": 1,
          "type": "integer",
          "format": "int32"
        },
        "timestamp": {
          "example": 1568294945927,
          "type": "integer",
          "format": "int64"
        },
        "type": {
          "$ref": "#/definitions/UpdatePolicyTransactionType"
        },
        "opType": {
          "$ref": "#/definitions/OpType"
        },
        "policyId": {
          "example": "DP5MggKC8GJuLZshCVNSYwBtE6WTRtMM1YPPdcmwbuNg",
          "type": "string"
        },
        "owners": {
          "example": [
            "3NotQaBygbSvYZW4ftJ2ZwLXex4rTHY1Qzn",
            "3votNaBcgb25FdsdgsdSvYZW4ftJ2ZwLXex"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "recipients": {
          "example": [
            "3NotQaBygbSvYZW4ftJ2ZwLXex4rTHY1Qzn",
            "3votNaBcgb25FdsdgsdSvYZW4ftJ2ZwLXex",
            null
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "PolicyDataHashTransaction": {
      "title": "PolicyDataHashTransaction",
      "type": "object",
      "properties": {
        "chainId": {
          "example": 1,
          "type": "number",
          "format": "double"
        },
        "senderPublicKey": {
          "example": "D56Gk8tvSAhNesghXgjAw67rSYDf4F2vo7HmsFTuGweC",
          "type": "string"
        },
        "sender": {
          "example": "3NotQaBygbSvYZW4ftJ2ZwLXex4rTHY1Qzn",
          "type": "string"
        },
        "proofs": {
          "example": [
            "5wMeGz4xzrs1AYJQR7DQU8jK8KJZ4g7HGxiGiZ1H8rfUHJKyKxTcZWFWHhojWuJMjst6kbDYL4EkcV2GyXKffyPU"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "fee": {
          "example": 500,
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "example": "DP5MggKC8GJuLZshCVNSYwBtE6WTRtMM1YPPdcmwbuNg",
          "type": "string"
        },
        "version": {
          "example": 1,
          "type": "integer",
          "format": "int32"
        },
        "timestamp": {
          "example": 1568294945927,
          "type": "integer",
          "format": "int64"
        },
        "type": {
          "$ref": "#/definitions/PolicyDataHashTransactionType"
        },
        "policyId": {
          "example": "DP5MggKC8GJuLZshCVNSYwBtE6WTRtMM1YPPdcmwbuNg",
          "type": "string"
        },
        "dataHash": {
          "example": "b48d1de58c39d2160a4b8a5a9cae90818da1212742ec1f11fba1209bed0a212c",
          "type": "string"
        }
      }
    },
    "DataEntry": {
      "title": "DataEntry",
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/DataEntryType"
        },
        "key": {
          "example": "height",
          "type": "string"
        },
        "value": {
          "example": 100,
          "type": "number",
          "format": "double"
        }
      },
      "required": [
        "type",
        "key",
        "value"
      ]
    },
    "Block": {
      "title": "Block",
      "type": "object",
      "properties": {
        "reference": {
          "example": "5qWJh9aQ2hkwnBWygGYmrBhzMe5inRZ2r6WhEXz3VJsiMtASWkvbsVeZGychZKzcPDbWmpzdhQwNQJ19PfK2dst9",
          "type": "string"
        },
        "blocksize": {
          "example": 589,
          "type": "integer",
          "format": "int32"
        },
        "features": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "signature": {
          "example": "4U4Hmg4mDYrvxaZ3JVzL1Z1piPDZ1PJ61vd1PeS7ESZFkHsUCUqeeAZoszTVr43Z4NV44dqbLv9WdrLytDL6gHuv",
          "type": "string"
        },
        "fee": {
          "example": 5000000,
          "type": "integer",
          "format": "int32"
        },
        "generator": {
          "example": "3NkZd8Xd4KsuPiNVsuphRNCZE3SqJycqv8d",
          "type": "string"
        },
        "pos-consensus": {
          "$ref": "#/definitions/PosConsensus"
        },
        "poa-consensus": {
          "$ref": "#/definitions/PoaConsensus"
        },
        "transactionCount": {
          "example": 2,
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "example": 12,
          "type": "integer",
          "format": "int32"
        },
        "timestamp": {
          "example": 1568287320962,
          "type": "integer",
          "format": "int64"
        },
        "height": {
          "example": 48260,
          "type": "integer",
          "format": "int32"
        },
        "transactions": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "BlockHeader": {
      "title": "BlockHeader",
      "type": "object",
      "properties": {
        "reference": {
          "example": "5qWJh9aQ2hkwnBWygGYmrBhzMe5inRZ2r6WhEXz3VJsiMtASWkvbsVeZGychZKzcPDbWmpzdhQwNQJ19PfK2dst9",
          "type": "string"
        },
        "blocksize": {
          "example": 589,
          "type": "integer",
          "format": "int32"
        },
        "features": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "signature": {
          "example": "4U4Hmg4mDYrvxaZ3JVzL1Z1piPDZ1PJ61vd1PeS7ESZFkHsUCUqeeAZoszTVr43Z4NV44dqbLv9WdrLytDL6gHuv",
          "type": "string"
        },
        "fee": {
          "example": 5000000,
          "type": "integer",
          "format": "int32"
        },
        "generator": {
          "example": "3NkZd8Xd4KsuPiNVsuphRNCZE3SqJycqv8d",
          "type": "string"
        },
        "pos-consensus": {
          "$ref": "#/definitions/PosConsensus"
        },
        "poa-consensus": {
          "$ref": "#/definitions/PoaConsensus"
        },
        "transactionCount": {
          "example": 2,
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "example": 12,
          "type": "integer",
          "format": "int32"
        },
        "timestamp": {
          "example": 1568287320962,
          "type": "integer",
          "format": "int64"
        },
        "height": {
          "example": 48260,
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "AddressSimplified": {
      "title": "AddressSimplified",
      "type": "object",
      "properties": {
        "address": {
          "example": "3NkZd8Xd4KsuPiNVsuphRNCZE3SqJycqv8d",
          "type": "string"
        }
      },
      "required": [
        "address"
      ]
    },
    "Balance": {
      "title": "Balance",
      "type": "object",
      "properties": {
        "address": {
          "example": "3NkZd8Xd4KsuPiNVsuphRNCZE3SqJycqv8d",
          "type": "string"
        },
        "confirmations": {
          "example": 0,
          "type": "integer",
          "format": "int32"
        },
        "balance": {
          "example": 1011543800600,
          "type": "integer",
          "format": "int64"
        }
      },
      "required": [
        "address",
        "confirmations",
        "balance"
      ]
    },
    "GeneratingBalance": {
      "title": "GeneratingBalance",
      "type": "object",
      "properties": {
        "address": {
          "example": "3NkZd8Xd4KsuPiNVsuphRNCZE3SqJycqv8d",
          "type": "string"
        },
        "generatingBalance": {
          "example": 1011543800600,
          "type": "integer",
          "format": "int64"
        }
      },
      "required": [
        "address",
        "generatingBalance"
      ]
    },
    "ContractAssetBalance": {
      "title": "ContractAssetBalanceResponse",
      "type": "object",
      "properties": {
        "assetId": {
          "example": "9ekQuYn92natMnMq8KqeGK3Nn7cpKd3BvPEGgD6fFyyz",
          "type": "string"
        },
        "balance": {
          "example": "2100000000000000",
          "type": "string"
        },
        "decimals": {
          "example": 8,
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ContractAssetsBalancesRequest": {
      "title": "ContractAssetsBalancesRequest",
      "type": "object",
      "properties": {
        "contractId": {
          "example": "9ekQuYn92natMnMq8KqeGK3Nn7cpKd3BvPEGgD6fFyyz",
          "type": "string"
        },
        "assetIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "contractId",
        "assetIds"
      ]
    },
    "ValiditySingle": {
      "title": "ValiditySingle",
      "type": "object",
      "properties": {
        "addressOrAlias": {
          "example": "3NkZd8Xd4KsuPiNVsuphRNCZE3SqJycqv8d",
          "type": "string"
        },
        "valid": {
          "example": false,
          "type": "boolean"
        },
        "reason": {
          "example": "InvalidAddress(Unknown address version: 77)",
          "type": "string"
        }
      },
      "required": [
        "addressOrAlias",
        "valid"
      ]
    },
    "Signed": {
      "title": "Signed",
      "type": "object",
      "properties": {
        "message": {
          "example": "wWshKhJj",
          "type": "string"
        },
        "publicKey": {
          "example": "FyvVt9uDdEZdA4TE6JmqgSm3X2BBdeWT3uasmqXEhDGq",
          "type": "string"
        },
        "signature": {
          "example": "3WtGvJRuvYULVK8onTnnCh7xQNjog6qkwJgz6FnSrJZdWUMtZJU7TpQEjSoBXwUXfoUauH8tfFNibAwvzENGd6J5",
          "type": "string"
        }
      },
      "required": [
        "message",
        "publicKey",
        "signature"
      ]
    },
    "AddressScriptInfo": {
      "title": "AddressScriptInfo",
      "type": "object",
      "properties": {
        "address": {
          "example": "3NkZd8Xd4KsuPiNVsuphRNCZE3SqJycqv8d",
          "type": "string"
        },
        "script": {
          "example": "3rbFDtbPwAvSp2vBvqGfGR9nRS1nBVnfuSCN3HxSZ7fVRpt3tuFG5JSmyTmvHPxYf34SocMRkRKFgzTtXXnnv7upRHXJzZrLSQo8tUW6yMtEiZ",
          "type": "string"
        },
        "scriptText": {
          "example": "ScriptV1(BLOCK(LET(x,CONST_LONG(1)),FUNCTION_CALL(FunctionHeader(==,List(LONG, LONG)),List(FUNCTION_CALL(FunctionHeader(+,List(LONG, LONG)),List(REF(x,LONG), CONST_LONG(1)),LONG), CONST_LONG(2)),BOOLEAN),BOOLEAN))",
          "type": "string"
        },
        "complexity": {
          "example": 11,
          "type": "integer",
          "format": "int64"
        }
      },
      "required": [
        "address",
        "complexity"
      ]
    },
    "VerificationResult": {
      "title": "VerificationResult",
      "type": "object",
      "properties": {
        "valid": {
          "example": true,
          "type": "boolean"
        }
      },
      "required": [
        "valid"
      ]
    },
    "SignedMessage": {
      "title": "SignedMessage",
      "type": "object",
      "properties": {
        "message": {
          "example": "message",
          "type": "string"
        },
        "signature": {
          "example": "64jhcF6DyvDntTDHFhcDaxVEXtd52mqC6uWbEiysxLAsab3NU4jNBWUS4TrAdGfaMwiQ5eybP8zv5MWBBUauk1pA",
          "type": "string"
        },
        "publickey": {
          "example": "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww",
          "type": "string"
        }
      },
      "required": [
        "message",
        "signature",
        "publickey"
      ]
    },
    "BalanceDetails": {
      "title": "BalanceDetails",
      "type": "object",
      "properties": {
        "address": {
          "example": "3NkZd8Xd4KsuPiNVsuphRNCZE3SqJycqv8d",
          "type": "string"
        },
        "regular": {
          "example": 1007180000000,
          "type": "integer",
          "format": "int64"
        },
        "generating": {
          "example": 1006678400000,
          "type": "integer",
          "format": "int64"
        },
        "available": {
          "example": 1007180000000,
          "type": "integer",
          "format": "int64"
        },
        "effective": {
          "example": 1007180000000,
          "type": "integer",
          "format": "int64"
        }
      },
      "required": [
        "address",
        "regular",
        "generating",
        "available",
        "effective"
      ]
    },
    "ContractBalanceDetails": {
      "title": "ContractBalanceDetails",
      "type": "object",
      "properties": {
        "contractId": {
          "example": "DP5MggKC8GJuLZshCVNSYwBtE6WTRtMM1YPPdcmwbuNg",
          "type": "string"
        },
        "regular": {
          "example": 100000,
          "type": "integer",
          "format": "int64"
        },
        "leasedOut": {
          "example": 30000,
          "type": "integer",
          "format": "int64"
        },
        "available": {
          "example": 70000,
          "type": "integer",
          "format": "int64"
        }
      },
      "required": [
        "address",
        "regular",
        "leasedOut",
        "available"
      ]
    },
    "AddressesMessage": {
      "title": "AddressesMessage",
      "type": "object",
      "properties": {
        "addresses": {
          "example": [
            "3NkZd8Xd4KsuPiNVsuphRNCZE3SqJycqv8d"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "addresses"
      ]
    },
    "ValidateManyReq": {
      "title": "ValidateManyReq",
      "type": "object",
      "properties": {
        "addressesOrAliases": {
          "example": [
            "3NkZd8Xd4KsuPiNVsuphRNCZE3SqJycqv8d"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "addressesOrAliases"
      ]
    },
    "DecryptDataResponse": {
      "title": "DecryptDataResponse",
      "type": "object",
      "properties": {
        "decryptedText": {
          "example": "some string to encrypt",
          "type": "string"
        }
      },
      "required": [
        "decryptedText"
      ]
    },
    "DecryptDataRequest": {
      "title": "DecryptDataRequest",
      "type": "object",
      "properties": {
        "recipient": {
          "example": "3NkZd8Xd4KsuPiNVsuphRNCZE3SqJycqv8d",
          "type": "string"
        },
        "password": {
          "example": "12345qwert",
          "type": "string"
        },
        "encryptedText": {
          "example": "t859AE7idnjPpn3lUiorfzSGwcGPMVdOhQe1HAhoI0MOXOQPBc8TUhn+8pKRCL8evH2Ra9Vc",
          "type": "string"
        },
        "wrappedKey": {
          "example": "2nfob2yW76xj2rQBWZkzFD2UjYymWqQUCpFqbSWQiSYnuaw6DZoAde8KsTCMxPFVHA",
          "type": "string"
        },
        "senderPublicKey": {
          "example": "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww",
          "type": "string"
        },
        "cryptoAlgo": {
          "example": "aes",
          "type": "string"
        }
      },
      "required": [
        "recipient",
        "encryptedText",
        "wrappedKey",
        "senderPublicKey",
        "cryptoAlgo"
      ]
    },
    "EncryptedSingleResponse": {
      "title": "EncryptedSingleResponse",
      "type": "object",
      "properties": {
        "encryptedText": {
          "example": "t859AE7idnjPpn3lUiorfzSGwcGPMVdOhQe1HAhoI0MOXOQPBc8TUhn+8pKRCL8evH2Ra9Vc",
          "type": "string"
        },
        "publicKey": {
          "example": "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww",
          "type": "string"
        },
        "wrappedKey": {
          "example": "2nfob2yW76xj2rQBWZkzFD2UjYymWqQUCpFqbSWQiSYnuaw6DZoAde8KsTCMxPFVHA",
          "type": "string"
        }
      },
      "required": [
        "encryptedText",
        "publicKey",
        "wrappedKey"
      ]
    },
    "EncryptDataRequest": {
      "title": "EncryptDataRequest",
      "type": "object",
      "properties": {
        "sender": {
          "example": "3NkZd8Xd4KsuPiNVsuphRNCZE3SqJycqv8d",
          "type": "string"
        },
        "password": {
          "example": "12345qwert",
          "type": "string"
        },
        "encryptionText": {
          "example": "some string to encrypt",
          "type": "string"
        },
        "recipientsPublicKeys": {
          "example": [
            "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "cryptoAlgo": {
          "example": "aes",
          "type": "string"
        }
      },
      "required": [
        "sender",
        "encryptionText",
        "recipientsPublicKeys",
        "cryptoAlgo"
      ]
    },
    "EncryptedForManyResponse": {
      "title": "EncryptedForManyResponse",
      "type": "object",
      "properties": {
        "encryptedText": {
          "example": "R9IVKDrCuJYI7eCr67wVFDQd1jpxEs/dYh2MWBxLpFMlI9p2t09rm3gC5PwrqCeC38wizxGc",
          "type": "string"
        },
        "recipientToWrappedStructure": {
          "example": {
            "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww": "5hYfvHSbnfEXyLeAHgkU38ZCaRib7t2hnj42azA96ZpiQtrq8MdbBRj1g9AoQnQDTR"
          },
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "encryptedText",
        "recipientToWrappedStructure"
      ]
    },
    "ConnectReq": {
      "title": "ConnectReq",
      "type": "object",
      "properties": {
        "host": {
          "example": "127.0.0.1",
          "type": "string"
        },
        "port": {
          "example": 6868,
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "host",
        "port"
      ]
    },
    "PrivacyForceSyncResponse": {
      "title": "PrivacyForceSyncResponse",
      "type": "object",
      "properties": {
        "forceRestarted": {
          "example": 0,
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "forceRestarted"
      ]
    },
    "PolicyMetaData": {
      "title": "PolicyMetaData",
      "type": "object",
      "properties": {
        "sender": {
          "example": "3HYW75PpAeVukmbYo9PQ3mzSHdKUgEytUUz",
          "type": "string"
        },
        "policy": {
          "example": "4gZnJvbSBvdGhlciBhbmltYWxzLCB3aGljaC",
          "type": "string"
        },
        "info": {
          "$ref": "#/definitions/PrivacyDataDataInfo"
        },
        "hash": {
          "example": "e67ad392ab4d933f39d5723aeed96c18c491140e119d590103e7fd6de15623f1",
          "type": "string"
        }
      },
      "required": [
        "sender",
        "policy",
        "type",
        "info",
        "hash"
      ]
    },
    "PrivacyDataDataInfo": {
      "title": "PrivacyDataDataInfo",
      "type": "object",
      "properties": {
        "filename": {
          "example": "Договор об оказании услуг №100/5.doc",
          "type": "string"
        },
        "size": {
          "example": 2048,
          "type": "integer",
          "format": "int32"
        },
        "timestamp": {
          "example": 1000000000,
          "type": "integer",
          "format": "int64"
        },
        "author": {
          "example": "AIvanov@org.com",
          "type": "string"
        },
        "comment": {
          "example": "la la fam",
          "type": "string"
        }
      },
      "required": [
        "filename",
        "size",
        "timestamp",
        "author",
        "comment"
      ]
    },
    "PoliciesMetaInfoRequest": {
      "title": "PoliciesMetaInfoRequest",
      "type": "object",
      "properties": {
        "policiesDataHashes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PolicyIdWithDataHash"
          }
        }
      },
      "required": [
        "policiesDataHashes"
      ]
    },
    "PolicyIdWithDataHash": {
      "title": "PolicyIdWithDataHash",
      "type": "object",
      "properties": {
        "policyId": {
          "example": "4gZnJvbSBvdGhlciBhbmltYWxzLCB3aGljaC",
          "type": "string"
        },
        "datahashes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "e67ad392ab4d933f39d5723aeed96c18c491140e119d590103e7fd6de15623f1"
          ]
        }
      },
      "required": [
        "policyId",
        "datahashes"
      ]
    },
    "PoliciesMetaInfoResponse": {
      "title": "PoliciesMetaInfoResponse",
      "type": "object",
      "properties": {
        "policiesDataInfo": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PolicyDatasInfo"
          }
        }
      },
      "required": [
        "policiesDataInfo"
      ]
    },
    "PolicyDatasInfo": {
      "title": "PolicyDatasInfo",
      "type": "object",
      "properties": {
        "policyId": {
          "example": "4gZnJvbSBvdGhlciBhbmltYWxzLCB3aGljaC",
          "type": "string"
        },
        "datasInfo": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PolicyItemInfo"
          }
        }
      },
      "required": [
        "policyId",
        "datasInfo"
      ]
    },
    "PolicyItemInfo": {
      "title": "PolicyItemInfo",
      "type": "object",
      "properties": {
        "sender": {
          "example": "3NkZd8Xd4KsuPiNVsuphRNCZE3SqJycqv8d",
          "type": "string"
        },
        "policy": {
          "example": "4gZnJvbSBvdGhlciBhbmltYWxzLCB3aGljaC",
          "type": "string"
        },
        "info": {
          "$ref": "#/definitions/PolicyItemFileInfo"
        },
        "hash": {
          "example": "DJ35ymschUFDmqCnDJewjcnVExVkWgX7mJDXhFy9X8oQ",
          "type": "string"
        }
      },
      "required": [
        "sender",
        "policy",
        "info",
        "hash"
      ]
    },
    "PolicyItemFileInfo": {
      "title": "PolicyItemFileInfo",
      "type": "object",
      "properties": {
        "filename": {
          "example": "Contract №100/5.doc",
          "type": "string"
        },
        "size": {
          "example": 2048,
          "type": "integer",
          "format": "int32"
        },
        "timestamp": {
          "example": 1000000000,
          "type": "integer",
          "format": "int64"
        },
        "author": {
          "example": "AIvanov@org.com",
          "type": "string"
        },
        "comment": {
          "example": "Comment",
          "type": "string"
        }
      },
      "required": [
        "filename",
        "size",
        "timestamp",
        "author",
        "comment"
      ]
    },
    "SendDataRequest": {
      "title": "SendDataRequest",
      "type": "object",
      "properties": {
        "sender": {
          "example": "3HYW75PpAeVukmbYo9PQ3mzSHdKUgEytUUz",
          "type": "string"
        },
        "policyId": {
          "example": "4gZnJvbSBvdGhlciBhbmltYWxzLCB3aGljaC",
          "type": "string"
        },
        "type": {
          "example": "file",
          "type": "string"
        },
        "data": {
          "example": "some_base64_encoded_string",
          "type": "string"
        },
        "hash": {
          "example": "e67ad392ab4d933f39d5234asdd96c18c491140e119d590103e7fd6de15623f9",
          "type": "string"
        },
        "info": {
          "$ref": "#/definitions/PrivacyDataDataInfo"
        },
        "fee": {
          "example": 15000000,
          "type": "integer",
          "format": "int64"
        },
        "password": {
          "example": "12345qwert",
          "type": "string"
        },
        "timestamp": {
          "type": "number",
          "format": "double"
        },
        "atomicBadge": {
          "$ref": "#/definitions/AtomicBadge"
        }
      },
      "required": [
        "sender",
        "policyId",
        "type",
        "data",
        "hash",
        "info",
        "fee"
      ]
    },
    "AtomicBadge": {
      "title": "AtomicBadge",
      "type": "object",
      "properties": {
        "trustedSender": {
          "example": "3HYW75PpAeVukmbYo9PQ3mzSHdKUgEytUUz",
          "type": "string"
        }
      }
    },
    "CompilationResult": {
      "title": "CompilationResult",
      "type": "object",
      "properties": {
        "script": {
          "example": "3rbFDtbPwAvSp2vBvqGfGR9nRS1nBVnfuSCN3HxSZ7fVRpt3tuFG5JSmyTmvHPxYf34SocMRkRKFgzTtXXnnv7upRHXJzZrLSQo8tUW6yMtEiZ",
          "type": "string"
        },
        "complexity": {
          "example": 11,
          "type": "integer",
          "format": "int64"
        },
        "extraFee": {
          "example": 10001,
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "script",
        "complexity"
      ]
    },
    "RoleInfo": {
      "title": "RoleInfo",
      "type": "object",
      "properties": {
        "role": {
          "type": "string"
        },
        "dueTimestamp": {
          "type": "number",
          "format": "double"
        }
      },
      "required": [
        "role"
      ]
    },
    "RolesResponse": {
      "title": "RolesResponse",
      "type": "object",
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RoleInfo"
          }
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        }
      },
      "required": [
        "roles",
        "timestamp"
      ]
    },
    "RolesForAddressResponse": {
      "title": "RolesForAddressResponse",
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RoleInfo"
          }
        }
      },
      "required": [
        "address",
        "roles"
      ]
    },
    "RolesForSeqResponse": {
      "title": "RolesForSeqResponse",
      "type": "object",
      "properties": {
        "addressToRoles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RolesForAddressResponse"
          }
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        }
      },
      "required": [
        "addressToRoles",
        "timestamp"
      ]
    },
    "PermissionsForAddressesReq": {
      "title": "PermissionsForAddressesReq",
      "type": "object",
      "properties": {
        "addresses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        }
      },
      "required": [
        "addresses",
        "timestamp"
      ]
    },
    "GenerationSignatureResult": {
      "title": "GenerationSignatureResult",
      "type": "object",
      "properties": {
        "generationSignature": {
          "type": "string"
        }
      },
      "required": [
        "generationSignature"
      ]
    },
    "BaseTargetResult": {
      "title": "BaseTargetResult",
      "type": "object",
      "properties": {
        "baseTarget": {
          "type": "integer",
          "format": "int64"
        },
        "score": {
          "type": "string"
        }
      },
      "required": [
        "baseTarget",
        "score"
      ]
    },
    "MinersAtHeight": {
      "title": "MinersAtHeight",
      "type": "object",
      "properties": {
        "miners": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "height": {
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "miners",
        "height"
      ]
    },
    "MinersAtTimestamp": {
      "title": "MinersAtTimestamp",
      "type": "object",
      "properties": {
        "miners": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        }
      },
      "required": [
        "miners",
        "timestamp"
      ]
    },
    "BannedMiners": {
      "title": "BannedMiners",
      "type": "object",
      "properties": {
        "bannedMiners": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "height": {
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "bannedMiners",
        "height"
      ]
    },
    "ContractsIdMessage": {
      "title": "ContractsIdMessage",
      "type": "object",
      "properties": {
        "contracts": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "contracts"
      ]
    },
    "ContractKeysFilter": {
      "title": "ContractKeysFilter",
      "type": "object",
      "properties": {
        "keys": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "keys"
      ]
    },
    "ContractExecutionMessage": {
      "title": "ContractExecutionMessage",
      "type": "object",
      "properties": {
        "sender": {
          "example": "3NotQaBygbSvYZW4ftJ2ZwLXex4rTHY1Qzn",
          "type": "string"
        },
        "senderPublicKey": {
          "example": "CgqRPcPnexY533gCh2SSvBXh5bca1qMs7KFGntawHGww",
          "type": "string"
        },
        "txId": {
          "example": "DP5MggKC8GJuLZshCVNSYwBtE6WTRtMM1YPPdcmwbuNg",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/Status"
        },
        "code": {
          "example": 1,
          "type": "number",
          "format": "double"
        },
        "message": {
          "example": "some message",
          "type": "string"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "signature": {
          "example": "64jhcF6DyvDntTDHFhcDaxVEXtd52mqC6uWbEiysxLAsab3NU4jNBWUS4TrAdGfaMwiQ5eybP8zv5MWBBUauk1pA",
          "type": "string"
        }
      }
    },
    "ContractInfo": {
      "title": "ContractInfo",
      "type": "object",
      "properties": {
        "contractId": {
          "example": "DP5MggKC8GJuLZshCVNSYwBtE6WTRtMM1YPPdcmwbuNg",
          "type": "string"
        },
        "image": {
          "example": "localhost:5000/smart-kv",
          "type": "string"
        },
        "imageHash": {
          "example": "b48d1de58c39d2160a4b8a5a9cae90818da1212742ec1f11fba1209bed0a212c",
          "type": "string"
        },
        "version": {
          "example": 1,
          "type": "integer",
          "format": "int32"
        },
        "active": {
          "example": true,
          "type": "boolean"
        }
      },
      "required": [
        "contractId",
        "image",
        "imageHash",
        "version",
        "active"
      ]
    },
    "ActivationStatus": {
      "title": "ActivationStatus",
      "type": "object",
      "properties": {
        "height": {
          "example": 47041,
          "type": "integer",
          "format": "int32"
        },
        "votingInterval": {
          "example": 1,
          "type": "integer",
          "format": "int32"
        },
        "votingThreshold": {
          "example": 1,
          "type": "integer",
          "format": "int32"
        },
        "nextCheck": {
          "example": 47041,
          "type": "integer",
          "format": "int32"
        },
        "features": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeatureActivationStatus"
          }
        }
      },
      "required": [
        "height",
        "votingInterval",
        "votingThreshold",
        "nextCheck",
        "features"
      ]
    },
    "FeatureActivationStatus": {
      "title": "FeatureActivationStatus",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "description": {
          "type": "string"
        },
        "blockchainStatus": {
          "example": "ACTIVATED",
          "type": "string"
        },
        "nodeStatus": {
          "type": "object"
        },
        "activationHeight": {
          "example": 0,
          "type": "number",
          "format": "double"
        },
        "supportingBlocks": {
          "example": 0,
          "type": "number",
          "format": "double"
        }
      },
      "required": [
        "id",
        "description",
        "blockchainStatus",
        "nodeStatus"
      ]
    },
    "RollbackParams": {
      "title": "RollbackParams",
      "type": "object",
      "properties": {
        "rollbackTo": {
          "example": 100,
          "type": "integer",
          "format": "int32"
        },
        "returnTransactionsToUtx": {
          "type": "boolean"
        }
      },
      "required": [
        "rollbackTo",
        "returnTransactionsToUtx"
      ]
    },
    "DebugMessage": {
      "title": "DebugMessage",
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      },
      "required": [
        "message"
      ]
    },
    "ChangeLoggerLevelRequest": {
      "title": "ChangeLoggerLevelRequest",
      "type": "object",
      "properties": {
        "logger": {
          "example": "com.wavesenterprise.Application",
          "type": "string"
        },
        "level": {
          "$ref": "#/definitions/Level"
        }
      },
      "required": [
        "logger",
        "level"
      ]
    },
    "AliasByAliasResponse": {
      "title": "AliasByAliasResponse",
      "type": "object",
      "properties": {
        "address": {
          "example": "address:3Mx2afTZ2KbRrLNbytyzTtXukZvqEB8SkW7",
          "type": "string"
        }
      }
    },
    "AllowedNode": {
      "title": "AllowedNode",
      "type": "object",
      "properties": {
        "address": {
          "example": "3Nm84ERiJqKfuqSYxzMAhaJXdj2ugA7Ve7T",
          "type": "string"
        },
        "declaredAddress": {
          "example": "66xMj1E1AxxySrNKpRzDEmVnbxXKfbgdpEQjTPfKsHcT",
          "type": "string"
        }
      }
    },
    "Balance2": {
      "title": "Balance2",
      "type": "object",
      "properties": {
        "assetId": {
          "example": "3Mv61qe6egMSjRDZiiuvJDnf3Q1qW9tTZDB",
          "type": "string"
        },
        "balance": {
          "example": 100000000,
          "type": "number",
          "format": "double"
        },
        "reissuable": {
          "example": true,
          "type": "boolean"
        },
        "sponsorshipIsEnabled": {
          "example": true,
          "type": "boolean"
        },
        "sponsorBalance": {
          "example": 0,
          "type": "number",
          "format": "double"
        },
        "quantity": {
          "example": 10000000,
          "type": "number",
          "format": "double"
        },
        "issueTransaction": {
          "$ref": "#/definitions/IssueTransaction"
        }
      }
    },
    "AssetHolder": {
      "title": "AssetHolder",
      "type": "object"
    },
    "AddressAssetBalance": {
      "title": "AddressAssetBalance",
      "type": "object",
      "properties": {
        "name": {
          "example": "WBTC",
          "type": "string"
        },
        "assetId": {
          "example": "3Mv61qe6egMSjRDZiiuvJDnf3Q1qW9tTZDB",
          "type": "string"
        },
        "balance": {
          "example": 100000000,
          "type": "number",
          "format": "double"
        },
        "reissuable": {
          "example": true,
          "type": "boolean"
        },
        "sponsorshipIsEnabled": {
          "example": true,
          "type": "boolean"
        },
        "sponsorBalance": {
          "example": 0,
          "type": "number",
          "format": "double"
        },
        "quantity": {
          "example": 10000000,
          "type": "number",
          "format": "double"
        },
        "decimals": {
          "example": 8,
          "type": "integer"
        },
        "description": {
          "example": "Wrapped BTC token",
          "type": "string"
        },
        "timestamp": {
          "example": 100,
          "type": "integer",
          "format": "int64"
        },
        "issueHeight": {
          "example": 100,
          "type": "integer",
          "format": "int32"
        },
        "issuer": {
          "$ref": "#/definitions/AssetHolder"
        }
      }
    },
    "BlocksHeightResponse": {
      "title": "BlocksHeightResponse",
      "example": {
        "height": 11608
      },
      "type": "object",
      "properties": {
        "height": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ConsensusAlgoResponse": {
      "title": "ConsensusAlgoResponse",
      "type": "object",
      "properties": {
        "consensusAlgo": {
          "example": "Fair Proof-of-Stake (FairPoS)",
          "type": "string"
        }
      }
    },
    "ConsensusGeneratingbalanceResponse": {
      "title": "ConsensusGeneratingbalanceResponse",
      "type": "object",
      "properties": {
        "address": {
          "example": "3HYW75PpAeVukmbYo9PQ3mzSHdKUgEytUUz",
          "type": "string"
        },
        "balance": {
          "example": 100000000,
          "type": "number",
          "format": "double"
        }
      }
    },
    "ConsensusSettingsResponse": {
      "title": "ConsensusSettingsResponse",
      "type": "object",
      "properties": {
        "consensusAlgo": {
          "example": "Fair Proof-of-Stake (FairPoS)",
          "type": "string"
        },
        "roundDuration": {
          "example": 60000,
          "type": "number",
          "format": "double"
        },
        "syncDuration": {
          "example": 100000,
          "type": "number",
          "format": "double"
        },
        "banDurationBlocks": {
          "example": 400000,
          "type": "number",
          "format": "double"
        },
        "warningsForBan": {
          "example": 4,
          "type": "number",
          "format": "double"
        },
        "maxBansPercentage": {
          "example": 10,
          "type": "number",
          "format": "double"
        }
      }
    },
    "DebugMinerInfoResponse": {
      "title": "DebugMinerInfoResponse",
      "type": "object",
      "properties": {
        "address": {
          "example": "3NdBzMBKu9PXkqkT5Sdt73ZzqYUya47SUaA",
          "type": "string"
        },
        "miningBalance": {
          "example": 104504874210336,
          "type": "integer",
          "format": "int64"
        },
        "timestamp": {
          "example": 1571747984486,
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "DebugValidateResponse": {
      "title": "DebugValidateResponse",
      "type": "object",
      "properties": {
        "valid": {
          "example": false,
          "type": "boolean"
        },
        "validationTime": {
          "example": 14444,
          "type": "number",
          "format": "double"
        }
      }
    },
    "HistoryReplierCacheSizes": {
      "title": "HistoryReplierCacheSizes",
      "type": "object",
      "properties": {
        "blocks": {
          "example": 7,
          "type": "integer",
          "format": "int32"
        },
        "microBlocks": {
          "example": 50,
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Lease": {
      "title": "Lease",
      "type": "object",
      "properties": {
        "in": {
          "example": 0,
          "type": "integer",
          "format": "int32"
        },
        "out": {
          "example": 0,
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Level": {
      "title": "Level",
      "type": "string",
      "enum": [
        "ALL",
        "TRACE",
        "DEBUG",
        "INFO",
        "WARN",
        "ERROR",
        "OFF"
      ]
    },
    "MicroBlockSynchronizerCacheSizes": {
      "title": "MicroBlockSynchronizerCacheSizes",
      "type": "object",
      "properties": {
        "microBlockOwners": {
          "example": 4,
          "type": "integer",
          "format": "int32"
        },
        "nextInvs": {
          "example": 0,
          "type": "integer",
          "format": "int32"
        },
        "awaiting": {
          "example": 0,
          "type": "integer",
          "format": "int32"
        },
        "successfullyReceived": {
          "example": 11,
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "NodeStopResponse": {
      "title": "NodeStopResponse",
      "type": "object",
      "properties": {
        "stopped": {
          "example": true,
          "type": "boolean"
        }
      }
    },
    "OpType": {
      "title": "OpType",
      "type": "string",
      "enum": [
        "add",
        "remove"
      ]
    },
    "Peer": {
      "title": "Peer",
      "type": "object",
      "properties": {
        "address": {
          "example": "node-4/10.0.74.75:6864",
          "type": "string"
        },
        "declaredAddress": {
          "example": "/0.0.0.0:6864",
          "type": "string"
        },
        "nodeOwnerAddress": {
          "example": "3JNFkQ2cVu7ndEHLCs9A5HT63jSi1TV3mWK",
          "type": "string"
        },
        "peerName": {
          "example": "Node-245568",
          "type": "string"
        },
        "peerNonce": {
          "example": 245568,
          "type": "integer",
          "format": "int32"
        },
        "applicationVersion": {
          "example": "1.0.3",
          "type": "string"
        },
        "applicationConsensus": {
          "example": "pos",
          "type": "string"
        }
      }
    },
    "PeersAllResponse": {
      "title": "PeersAllResponse",
      "type": "object",
      "properties": {
        "address": {
          "example": "node-3/10.0.41.28:6864",
          "type": "string"
        },
        "lastSeen": {
          "example": 1568897794478,
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "PeersAllowedNodesResponse": {
      "title": "PeersAllowedNodesResponse",
      "type": "object",
      "properties": {
        "allowedNodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AllowedNode"
          }
        },
        "timestamp": {
          "example": 1568900371701,
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "PeersConnectResponse": {
      "title": "PeersConnectResponse",
      "type": "object",
      "properties": {
        "hostname": {
          "example": "localhost",
          "type": "string"
        },
        "status": {
          "example": "Trying to connect",
          "type": "string"
        }
      }
    },
    "PeersConnectedResponse": {
      "title": "PeersConnectedResponse",
      "type": "object",
      "properties": {
        "peers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Peer"
          }
        }
      }
    },
    "PeersHostnameResponse": {
      "title": "PeersHostnameResponse",
      "type": "object",
      "properties": {
        "connected": {
          "example": "true",
          "type": "string"
        },
        "hostname": {
          "example": "10.240.0.22",
          "type": "string"
        },
        "ip": {
          "example": "10.240.0.22",
          "type": "string"
        }
      }
    },
    "PeersSuspendedResponse": {
      "title": "PeersSuspendedResponse",
      "type": "object",
      "properties": {
        "hostname": {
          "example": "node-3/10.0.41.28:6864",
          "type": "string"
        },
        "lastSeen": {
          "example": 1568897794478,
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "PoaConsensus": {
      "title": "PoaConsensus",
      "type": "object",
      "properties": {
        "overall-skipped-rounds": {
          "example": 2,
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "PosConsensus": {
      "title": "PosConsensus",
      "type": "object",
      "properties": {
        "base-target": {
          "example": 249912231,
          "type": "integer",
          "format": "int32"
        },
        "generation-signature": {
          "example": "LM83w6eWQHnLJF2D9RQNdNcHAdnZLCLWrn5bfcoqcZy",
          "type": "string"
        }
      }
    },
    "protocol": {
      "title": "protocol",
      "type": "string",
      "enum": [
        "http",
        "https"
      ]
    },
    "Role": {
      "title": "Role",
      "type": "string",
      "enum": [
        "miner",
        "issuer",
        "dexer",
        "permissioner",
        "blacklister",
        "banned",
        "contract_developer connection_manager"
      ]
    },
    "ScoreObserverStats": {
      "title": "ScoreObserverStats",
      "type": "object",
      "properties": {
        "localScore": {
          "example": 446845719840603840,
          "type": "integer",
          "format": "int64"
        },
        "currentBestChannel": {
          "example": "None",
          "type": "string"
        },
        "scoresCacheSize": {
          "example": "2",
          "type": "string"
        }
      }
    },
    "ScriptDetails": {
      "title": "ScriptDetails",
      "type": "object",
      "properties": {
        "scriptComplexity": {
          "example": 7,
          "type": "number",
          "format": "double"
        },
        "script": {
          "example": "3rbFDtbPwAvSp2vBvqGfGR9nRS1nBVnfuSCN3HxSZ7fVRpt3tuFG5JSmyTmvHPxYf34SocMRkRKFgzTtXXnnv7upRHXJzZrLSQo8tUW6yMtEiZ",
          "type": "string"
        },
        "scriptText": {
          "example": "FUNCTION_CALL(FunctionHeader(==,List(LONG, LONG)),List(CONST_LONG(1), CONST_LONG(2)),BOOLEAN)",
          "type": "string"
        }
      }
    },
    "Status": {
      "title": "Status",
      "type": "string",
      "enum": [
        "Success",
        "Error",
        "Failure"
      ]
    },
    "TransactionsBroadcastRequest": {
      "title": "TransactionsBroadcastRequest",
      "example": {
        "senderPublicKey": "D56Gk8tvSAhNesghXgjAw67rSYDf4F2vo7HmsFTuGweC",
        "sender": "3NotQaBygbSvYZW4ftJ2ZwLXex4rTHY1Qzn",
        "fee": 500,
        "id": "DP5MggKC8GJuLZshCVNSYwBtE6WTRtMM1YPPdcmwbuNg",
        "version": 1,
        "timestamp": 1568294945927,
        "type": 3,
        "name": "SomeAsset",
        "quantity": 10000000000,
        "reissuable": true,
        "decimals": 2,
        "description": "Some description",
        "proofs": [
          "5wMeGz4xzrs1AYJQR7DQU8jK8KJZ4g7HGxiGiZ1H8rfUHJKyKxTcZWFWHhojWuJMjst6kbDYL4EkcV2GyXKffyPU"
        ]
      },
      "type": "object",
      "properties": {
        "proofs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "TransactionsCalculateFeeRequest": {
      "title": "TransactionsCalculateFeeRequest",
      "example": {
        "type": 3,
        "version": 2,
        "senderPublicKey": "D56Gk8tvSAhNesghXgjAw67rSYDf4F2vo7HmsFTuGweC",
        "name": "SomeAsset",
        "quantity": 10000000000,
        "reissuable": true,
        "decimals": 2,
        "description": "Some description"
      },
      "type": "object",
      "properties": {
        "password": {
          "example": "some_password",
          "type": "string"
        }
      }
    },
    "TransactionsCalculateFeeResponse": {
      "title": "TransactionsCalculateFeeResponse",
      "type": "object",
      "properties": {
        "feeAssetId": {
          "example": "E9yZC4cVhCDfbjFJCc9CqkAtkoFy5KaCe64iaxHM2adG",
          "type": "string"
        },
        "feeAmount": {
          "example": 100000,
          "type": "number",
          "format": "double"
        }
      }
    },
    "TransactionsSignRequest": {
      "title": "TransactionsSignRequest",
      "example": {
        "type": 3,
        "name": "SomeAsset",
        "quantity": 10000000000,
        "reissuable": true,
        "decimals": 2,
        "description": "Some description",
        "password": "some_password"
      },
      "type": "object",
      "properties": {
        "password": {
          "example": "some_password",
          "type": "string"
        }
      }
    },
    "TransactionsSignAndBroadcastRequest": {
      "title": "TransactionsSignAndBroadcastRequest",
      "example": {
        "type": 3,
        "name": "SomeAsset",
        "quantity": 10000000000,
        "reissuable": true,
        "decimals": 2,
        "description": "Some description",
        "password": "some_password"
      },
      "type": "object",
      "properties": {
        "password": {
          "example": "some_password",
          "type": "string"
        }
      }
    },
    "TransactionsUnconfirmedSizeResponse": {
      "title": "TransactionsUnconfirmedSizeResponse",
      "type": "object",
      "properties": {
        "size": {
          "example": 4,
          "type": "number",
          "format": "double"
        },
        "sizeInBytes": {
          "example": 1024,
          "type": "number",
          "format": "double"
        }
      }
    },
    "DataTransactionType": {
      "title": "DataTransactionType",
      "example": 12,
      "type": "integer",
      "format": "int32",
      "enum": [
        "12"
      ]
    },
    "DataEntryType": {
      "title": "DataEntryType",
      "type": "string",
      "enum": [
        "integer",
        "boolean",
        "binary",
        "string"
      ]
    },
    "SetScriptTransactionType": {
      "title": "SetScriptTransactionType",
      "example": 13,
      "type": "integer",
      "format": "int32",
      "enum": [
        "13"
      ]
    },
    "SetAssetScriptTransactionType": {
      "title": "SetAssetScriptTransactionType",
      "example": 15,
      "type": "integer",
      "format": "int32",
      "enum": [
        "15"
      ]
    },
    "PermitTransactionType": {
      "title": "PermitTransactionType",
      "example": 102,
      "type": "integer",
      "format": "int32",
      "enum": [
        "102"
      ]
    },
    "CreateContractTransactionType": {
      "title": "CreateContractTransactionType",
      "example": 103,
      "type": "integer",
      "format": "int32",
      "enum": [
        "103"
      ]
    },
    "CallContractTransactionType": {
      "title": "CallContractTransactionType",
      "example": 104,
      "type": "integer",
      "format": "int32",
      "enum": [
        "104"
      ]
    },
    "ExecutedContractTransactionType": {
      "title": "ExecutedContractTransactionType",
      "example": 105,
      "type": "integer",
      "format": "int32",
      "enum": [
        "105"
      ]
    },
    "DisableContractTransactionType": {
      "title": "DisableContractTransactionType",
      "example": 106,
      "type": "integer",
      "format": "int32",
      "enum": [
        "106"
      ]
    },
    "RegisterNodeTransactionType": {
      "title": "RegisterNodeTransactionType",
      "example": 111,
      "type": "integer",
      "format": "int32",
      "enum": [
        "111"
      ]
    },
    "CreatePolicyTransactionType": {
      "title": "CreatePolicyTransactionType",
      "example": 112,
      "type": "integer",
      "format": "int32",
      "enum": [
        "112"
      ]
    },
    "UpdatePolicyTransactionType": {
      "title": "UpdatePolicyTransactionType",
      "example": 113,
      "type": "integer",
      "format": "int32",
      "enum": [
        "113"
      ]
    },
    "PolicyDataHashTransactionType": {
      "title": "PolicyDataHashTransactionType",
      "example": 114,
      "type": "integer",
      "format": "int32",
      "enum": [
        "114"
      ]
    },
    "SnapshotStatusType": {
      "title": "SnapshotStatusType",
      "type": "string",
      "example": "Failed",
      "enum": [
        "NotExists",
        "Exists",
        "Failed"
      ]
    },
    "SnapshotStatus": {
      "title": "SnapshotStatus",
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/SnapshotStatusType"
        },
        "error": {
          "example": "An internal server error occurred",
          "type": "string"
        }
      },
      "required": [
        "status"
      ]
    },
    "SnapshotGenesisConfig": {
      "title": "SnapshotGenesisConfig",
      "type": "object",
      "properties": {
        "type": {
          "example": "snapshot-based",
          "type": "string"
        },
        "block-timestamp": {
          "example": 1614774779523,
          "type": "integer",
          "format": "int64"
        },
        "genesis-public-key-base-58": {
          "example": "6MjS6PuxE32NcwaYtCWZQNZa8H2HfV5bnV9TNLnesDnV",
          "type": "string"
        },
        "signature": {
          "example": "6759e62a193e065a3cec290e5f2cf5f3589fa4e5f7baad71e1309eeb8c7e2281",
          "type": "string"
        },
        "sender-role-enabled": {
          "example": false,
          "type": "boolean"
        }
      },
      "required": [
        "block-timestamp",
        "initial-balance",
        "genesis-public-key-base-58",
        "signature",
        "version",
        "sender-role-enabled"
      ]
    },
    "SwapStateResponse": {
      "title": "SwapStateResponse",
      "type": "object",
      "properties": {
        "message": {
          "example": "Finished swapping old state for snapshot",
          "type": "string"
        }
      },
      "required": [
        "message"
      ]
    },
    "MetricsType": {
      "title": "MetricsType",
      "type": "string",
      "example": "common",
      "enum": [
        "common",
        "block",
        "privacy",
        "contract",
        "poa"
      ]
    },
    "MetricsStatusResponse": {
      "title": "MetricsStatusResponse",
      "type": "object",
      "properties": {
        "enabled": {
          "example": [
            "common",
            "block",
            "privacy",
            "contract"
          ],
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetricsType"
          }
        },
        "disabled": {
          "example": [
            "common",
            "block",
            "privacy",
            "contract"
          ],
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetricsType"
          }
        }
      },
      "required": [
        "enabled",
        "disabled"
      ]
    }
  },
  "security": [
    {
      "API-Key": [],
      "Privacy-API-Key": [],
      "OAuth": []
    }
  ],
  "tags": [
    {
      "name": "addresses"
    },
    {
      "name": "blocks"
    },
    {
      "name": "crypto"
    },
    {
      "name": "peers"
    },
    {
      "name": "privacy"
    },
    {
      "name": "transactions"
    },
    {
      "name": "utils"
    },
    {
      "name": "permissions"
    },
    {
      "name": "alias"
    },
    {
      "name": "anchoring"
    },
    {
      "name": "assets"
    },
    {
      "name": "consensus"
    },
    {
      "name": "contracts"
    },
    {
      "name": "leasing"
    },
    {
      "name": "activation"
    },
    {
      "name": "debug"
    },
    {
      "name": "node"
    },
    {
      "name": "snapshot"
    }
  ],
  "externalDocs": {
    "url": "https://docs.wavesenterprise.com/",
    "description": "Waves Enterprise Documentation"
  }
}
