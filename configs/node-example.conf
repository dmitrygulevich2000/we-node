node {
  # Type of cryptography
  crypto.type = WAVES

  # Node owner address
  owner-address = " /FILL/ "

  # Node "home" and data directories to store the state
  directory = "/node"
  data-directory = "/node/data"

  wallet {
    # Path to keystore.
    file = "/node/keystore.dat"

    # Access password
    password = " /FILL/ "
  }

  # Blockchain settings
  blockchain {
    type = CUSTOM
    fees.enabled = false
    consensus {
      type = "poa"
      round-duration = "17s"
      sync-duration = "3s"
      ban-duration-blocks = 100
      warnings-for-ban = 3
      max-bans-percentage = 40
    }
    custom {
      address-scheme-character = "E"
      functionality {
        feature-check-blocks-period = 1500
        blocks-for-feature-activation = 1000
        pre-activated-features = { 2 = 0, 3 = 0, 4 = 0, 5 = 0, 6 = 0, 7 = 0, 9 = 0, 10 = 0, 100 = 0, 101 = 0, 119 = 0, 120 = 0, 130 = 0, 140 = 0, 160 = 0, 162 = 0, 173 = 0, 180 = 0 }
      }

      # Mainnet genesis settings
      genesis {
        average-block-delay: 60s
        initial-base-target: 153722867

        # Filled by GenesisBlockGenerator
        block-timestamp: 1573472578702

        initial-balance: 16250000 WEST

        # Filled by GenesisBlockGenerator
        genesis-public-key-base-58: ""

        # Filled by GenesisBlockGenerator
        signature: ""

        transactions = [
            # Initial token distribution:
            # - recipient: target's blockchain address (base58 string)
            # - amount: amount of tokens, multiplied by 10e8 (integer)
            #
            #     Example: { recipient: "3HQSr3VFCiE6JcWwV1yX8xttYbAGKTLV3Gz", amount: 30000000 WEST }
            #
            # Note:
            #   Sum of amounts must be equal to initial-balance above.
            #
          { recipient: " /FILL/ ", amount: 1000000 WEST },
          { recipient: " /FILL/ ", amount: 1500000 WEST },
          { recipient: " /FILL/ ", amount: 500000 WEST },
        ]
        network-participants = [
            # Initial participants and role distribution
            # - public-key: participant's base58 encoded public key;
            # - roles: list of roles to be granted;
            #
            #     Example: {public-key: "EPxkVA9iQejsjQikovyxkkY8iHnbXsR3wjgkgE7ZW1Tt", roles: [permissioner, miner, connection_manager, contract_developer, issuer]}
            #
            # Note:
            #   There has to be at least one miner, one permissioner and one connection_manager for the network to start correctly.
            #   Participants are granted access to the network via GenesisRegisterNodeTransaction.
            #   Role list could be empty, then given public-key will only be granted access to the network.
            #
          { public-key: " /FILL/ ", roles: [permissioner, miner, connection_manager, contract_developer, issuer]},
          { public-key: " /FILL/ ", roles: [miner]},
          { public-key: " /FILL/ ", roles: []},
        ]
      }
    }
  }

  # Application logging level. Could be DEBUG | INFO | WARN | ERROR. Default value is INFO.
  logging-level = DEBUG

  # P2P Network settings
  network {
    # Peers network addresses and ports
    #   Example: known-peers = ["node-1.com:6864", "node-2.com:6864"]
    known-peers = [  /FILL/  ]

    # Node name to send during handshake. Comment this string out to set random node name.
    #   Example: node-name = "your-we-node-name"
    node-name = " /FILL/ "

    # String with IP address and port to send as external address during handshake. Could be set automatically if uPnP is enabled.
    #   Example: declared-address = "your-node-address.com:6864"
    declared-address = "0.0.0.0:6864"
  }

  # New blocks generator settings
  miner {
    enable = yes
    micro-block-interval = 5s
    min-micro-block-age = 3s
    max-transactions-in-micro-block = 500
  }

  # Nodes REST API settings
  api {
    auth {
      type: "api-key"

      # Hash of API key string
      # You can obtain hashes by running ApiKeyHash generator
      api-key-hash: " /FILL/ "

      # Hash of API key string for PrivacyApi routes
      privacy-api-key-hash: " /FILL/ "
    }
  }

  # Docker smart contracts settings
  docker-engine {
    # Docker smart contracts enabled flag
    enable = yes

    # For starting contracts in a local docker
    use-node-docker-host = yes

    default-registry-domain = "registry.wavesenterprise.com/waves-enterprise-public"

    # Optional connection string to docker host
     docker-host = "unix:///var/run/docker.sock"

    # Optional string to node REST API if we use remote docker host
    # node-rest-api = "node-0"

    # Execution settings
    execution-limits {
      # Contract execution timeout
      timeout = 10s
    }
  }
}
